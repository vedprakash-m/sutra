454294a9a67e8eae2296716464c9caff
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useApi = useApi;
exports.useAsyncAction = useAsyncAction;
const react_1 = require("react");
const api_1 = require("../services/api");
const AuthProvider_1 = require("../components/auth/AuthProvider");
function useApi(apiCall, dependencies = []) {
    const [state, setState] = (0, react_1.useState)({
        data: null,
        loading: true,
        error: null,
    });
    const { token } = (0, AuthProvider_1.useAuth)();
    const fetchData = async () => {
        setState((prev) => ({ ...prev, loading: true, error: null }));
        try {
            // Set the auth token for API requests
            if (token) {
                api_1.apiService.setToken(token);
            }
            const result = await apiCall();
            setState({
                data: result,
                loading: false,
                error: null,
            });
        }
        catch (error) {
            setState({
                data: null,
                loading: false,
                error: error instanceof Error ? error.message : "An error occurred",
            });
        }
    };
    (0, react_1.useEffect)(() => {
        if (token !== null) {
            // Only fetch when auth state is determined
            fetchData();
        }
    }, [token, ...dependencies]);
    return {
        ...state,
        refetch: fetchData,
    };
}
function useAsyncAction() {
    const [loading, setLoading] = (0, react_1.useState)(false);
    const [error, setError] = (0, react_1.useState)(null);
    const { token } = (0, AuthProvider_1.useAuth)();
    const execute = async (action) => {
        setLoading(true);
        setError(null);
        try {
            // Set the auth token for API requests
            if (token) {
                api_1.apiService.setToken(token);
            }
            const result = await action();
            return result;
        }
        catch (error) {
            const errorMessage = error instanceof Error ? error.message : "An error occurred";
            setError(errorMessage);
            throw error;
        }
        finally {
            setLoading(false);
        }
    };
    return {
        loading,
        error,
        execute,
    };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LE9BQU8sQ0FBQyxDQUFDLENBQUMsbUJBQW1CLENBQUM7WUFDL0QsUUFBUSxDQUFDLFlBQVksQ0FBQyxDQUFDO1lBQ3ZCLE1BQU0sS0FBSyxDQUFDO1FBQ2QsQ0FBQztnQkFBUyxDQUFDO1lBQ1QsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3BCLENBQUM7SUFDSCxDQUFDLENBQUM7SUFFRixPQUFPO1FBQ0wsT0FBTztRQUNQLEtBQUs7UUFDTCxPQUFPO0tBQ1IsQ0FBQztBQUNKLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL1VzZXJzL3ZlZHByYWthc2htaXNocmEvc3V0cmEvc3JjL2hvb2tzL3VzZUFwaS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB1c2VTdGF0ZSwgdXNlRWZmZWN0IH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBhcGlTZXJ2aWNlIH0gZnJvbSBcIi4uL3NlcnZpY2VzL2FwaVwiO1xuaW1wb3J0IHsgdXNlQXV0aCB9IGZyb20gXCIuLi9jb21wb25lbnRzL2F1dGgvQXV0aFByb3ZpZGVyXCI7XG5cbmV4cG9ydCBpbnRlcmZhY2UgVXNlQXBpU3RhdGU8VD4ge1xuICBkYXRhOiBUIHwgbnVsbDtcbiAgbG9hZGluZzogYm9vbGVhbjtcbiAgZXJyb3I6IHN0cmluZyB8IG51bGw7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB1c2VBcGk8VD4oXG4gIGFwaUNhbGw6ICgpID0+IFByb21pc2U8VD4sXG4gIGRlcGVuZGVuY2llczogYW55W10gPSBbXSxcbik6IFVzZUFwaVN0YXRlPFQ+ICYgeyByZWZldGNoOiAoKSA9PiBQcm9taXNlPHZvaWQ+IH0ge1xuICBjb25zdCBbc3RhdGUsIHNldFN0YXRlXSA9IHVzZVN0YXRlPFVzZUFwaVN0YXRlPFQ+Pih7XG4gICAgZGF0YTogbnVsbCxcbiAgICBsb2FkaW5nOiB0cnVlLFxuICAgIGVycm9yOiBudWxsLFxuICB9KTtcblxuICBjb25zdCB7IHRva2VuIH0gPSB1c2VBdXRoKCk7XG5cbiAgY29uc3QgZmV0Y2hEYXRhID0gYXN5bmMgKCkgPT4ge1xuICAgIHNldFN0YXRlKChwcmV2KSA9PiAoeyAuLi5wcmV2LCBsb2FkaW5nOiB0cnVlLCBlcnJvcjogbnVsbCB9KSk7XG5cbiAgICB0cnkge1xuICAgICAgLy8gU2V0IHRoZSBhdXRoIHRva2VuIGZvciBBUEkgcmVxdWVzdHNcbiAgICAgIGlmICh0b2tlbikge1xuICAgICAgICBhcGlTZXJ2aWNlLnNldFRva2VuKHRva2VuKTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgYXBpQ2FsbCgpO1xuICAgICAgc2V0U3RhdGUoe1xuICAgICAgICBkYXRhOiByZXN1bHQsXG4gICAgICAgIGxvYWRpbmc6IGZhbHNlLFxuICAgICAgICBlcnJvcjogbnVsbCxcbiAgICAgIH0pO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBzZXRTdGF0ZSh7XG4gICAgICAgIGRhdGE6IG51bGwsXG4gICAgICAgIGxvYWRpbmc6IGZhbHNlLFxuICAgICAgICBlcnJvcjogZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLm1lc3NhZ2UgOiBcIkFuIGVycm9yIG9jY3VycmVkXCIsXG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAodG9rZW4gIT09IG51bGwpIHtcbiAgICAgIC8vIE9ubHkgZmV0Y2ggd2hlbiBhdXRoIHN0YXRlIGlzIGRldGVybWluZWRcbiAgICAgIGZldGNoRGF0YSgpO1xuICAgIH1cbiAgfSwgW3Rva2VuLCAuLi5kZXBlbmRlbmNpZXNdKTtcblxuICByZXR1cm4ge1xuICAgIC4uLnN0YXRlLFxuICAgIHJlZmV0Y2g6IGZldGNoRGF0YSxcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHVzZUFzeW5jQWN0aW9uPFQgPSBhbnk+KCkge1xuICBjb25zdCBbbG9hZGluZywgc2V0TG9hZGluZ10gPSB1c2VTdGF0ZShmYWxzZSk7XG4gIGNvbnN0IFtlcnJvciwgc2V0RXJyb3JdID0gdXNlU3RhdGU8c3RyaW5nIHwgbnVsbD4obnVsbCk7XG4gIGNvbnN0IHsgdG9rZW4gfSA9IHVzZUF1dGgoKTtcblxuICBjb25zdCBleGVjdXRlID0gYXN5bmMgKGFjdGlvbjogKCkgPT4gUHJvbWlzZTxUPik6IFByb21pc2U8VCB8IG51bGw+ID0+IHtcbiAgICBzZXRMb2FkaW5nKHRydWUpO1xuICAgIHNldEVycm9yKG51bGwpO1xuXG4gICAgdHJ5IHtcbiAgICAgIC8vIFNldCB0aGUgYXV0aCB0b2tlbiBmb3IgQVBJIHJlcXVlc3RzXG4gICAgICBpZiAodG9rZW4pIHtcbiAgICAgICAgYXBpU2VydmljZS5zZXRUb2tlbih0b2tlbik7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGFjdGlvbigpO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc3QgZXJyb3JNZXNzYWdlID1cbiAgICAgICAgZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLm1lc3NhZ2UgOiBcIkFuIGVycm9yIG9jY3VycmVkXCI7XG4gICAgICBzZXRFcnJvcihlcnJvck1lc3NhZ2UpO1xuICAgICAgdGhyb3cgZXJyb3I7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIHNldExvYWRpbmcoZmFsc2UpO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4ge1xuICAgIGxvYWRpbmcsXG4gICAgZXJyb3IsXG4gICAgZXhlY3V0ZSxcbiAgfTtcbn1cbiJdLCJ2ZXJzaW9uIjozfQ==