fadd9487b6c4664a51bc1bdfe76dad6b
/* istanbul ignore next */
function cov_jcnotovwt() {
  var path = "/Users/vedprakashmishra/sutra/src/components/collections/ImportModal.tsx";
  var hash = "fcedf225b21d589bb148b29d4329cf7d8c96f775";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/vedprakashmishra/sutra/src/components/collections/ImportModal.tsx",
    statementMap: {
      "0": {
        start: {
          line: 7,
          column: 44
        },
        end: {
          line: 7,
          column: 60
        }
      },
      "1": {
        start: {
          line: 8,
          column: 38
        },
        end: {
          line: 8,
          column: 50
        }
      },
      "2": {
        start: {
          line: 9,
          column: 44
        },
        end: {
          line: 9,
          column: 59
        }
      },
      "3": {
        start: {
          line: 10,
          column: 48
        },
        end: {
          line: 10,
          column: 60
        }
      },
      "4": {
        start: {
          line: 11,
          column: 29
        },
        end: {
          line: 40,
          column: 5
        }
      },
      "5": {
        start: {
          line: 12,
          column: 21
        },
        end: {
          line: 12,
          column: 44
        }
      },
      "6": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 14,
          column: 19
        }
      },
      "7": {
        start: {
          line: 14,
          column: 12
        },
        end: {
          line: 14,
          column: 19
        }
      },
      "8": {
        start: {
          line: 15,
          column: 8
        },
        end: {
          line: 39,
          column: 9
        }
      },
      "9": {
        start: {
          line: 16,
          column: 12
        },
        end: {
          line: 16,
          column: 34
        }
      },
      "10": {
        start: {
          line: 17,
          column: 28
        },
        end: {
          line: 17,
          column: 45
        }
      },
      "11": {
        start: {
          line: 18,
          column: 12
        },
        end: {
          line: 31,
          column: 13
        }
      },
      "12": {
        start: {
          line: 20,
          column: 29
        },
        end: {
          line: 20,
          column: 48
        }
      },
      "13": {
        start: {
          line: 21,
          column: 32
        },
        end: {
          line: 21,
          column: 56
        }
      },
      "14": {
        start: {
          line: 22,
          column: 16
        },
        end: {
          line: 22,
          column: 43
        }
      },
      "15": {
        start: {
          line: 24,
          column: 17
        },
        end: {
          line: 31,
          column: 13
        }
      },
      "16": {
        start: {
          line: 26,
          column: 32
        },
        end: {
          line: 26,
          column: 54
        }
      },
      "17": {
        start: {
          line: 27,
          column: 16
        },
        end: {
          line: 27,
          column: 43
        }
      },
      "18": {
        start: {
          line: 30,
          column: 16
        },
        end: {
          line: 30,
          column: 85
        }
      },
      "19": {
        start: {
          line: 34,
          column: 12
        },
        end: {
          line: 34,
          column: 59
        }
      },
      "20": {
        start: {
          line: 35,
          column: 12
        },
        end: {
          line: 35,
          column: 83
        }
      },
      "21": {
        start: {
          line: 38,
          column: 12
        },
        end: {
          line: 38,
          column: 35
        }
      },
      "22": {
        start: {
          line: 41,
          column: 29
        },
        end: {
          line: 56,
          column: 5
        }
      },
      "23": {
        start: {
          line: 42,
          column: 8
        },
        end: {
          line: 43,
          column: 19
        }
      },
      "24": {
        start: {
          line: 43,
          column: 12
        },
        end: {
          line: 43,
          column: 19
        }
      },
      "25": {
        start: {
          line: 44,
          column: 8
        },
        end: {
          line: 44,
          column: 30
        }
      },
      "26": {
        start: {
          line: 45,
          column: 8
        },
        end: {
          line: 55,
          column: 9
        }
      },
      "27": {
        start: {
          line: 46,
          column: 28
        },
        end: {
          line: 46,
          column: 53
        }
      },
      "28": {
        start: {
          line: 47,
          column: 12
        },
        end: {
          line: 47,
          column: 39
        }
      },
      "29": {
        start: {
          line: 50,
          column: 12
        },
        end: {
          line: 50,
          column: 56
        }
      },
      "30": {
        start: {
          line: 51,
          column: 12
        },
        end: {
          line: 51,
          column: 80
        }
      },
      "31": {
        start: {
          line: 54,
          column: 12
        },
        end: {
          line: 54,
          column: 35
        }
      },
      "32": {
        start: {
          line: 57,
          column: 31
        },
        end: {
          line: 82,
          column: 5
        }
      },
      "33": {
        start: {
          line: 59,
          column: 24
        },
        end: {
          line: 59,
          column: 26
        }
      },
      "34": {
        start: {
          line: 60,
          column: 8
        },
        end: {
          line: 80,
          column: 9
        }
      },
      "35": {
        start: {
          line: 61,
          column: 12
        },
        end: {
          line: 79,
          column: 15
        }
      },
      "36": {
        start: {
          line: 62,
          column: 30
        },
        end: {
          line: 62,
          column: 80
        }
      },
      "37": {
        start: {
          line: 63,
          column: 30
        },
        end: {
          line: 63,
          column: 32
        }
      },
      "38": {
        start: {
          line: 65,
          column: 16
        },
        end: {
          line: 69,
          column: 19
        }
      },
      "39": {
        start: {
          line: 66,
          column: 20
        },
        end: {
          line: 68,
          column: 21
        }
      },
      "40": {
        start: {
          line: 67,
          column: 24
        },
        end: {
          line: 67,
          column: 60
        }
      },
      "41": {
        start: {
          line: 70,
          column: 16
        },
        end: {
          line: 78,
          column: 17
        }
      },
      "42": {
        start: {
          line: 71,
          column: 20
        },
        end: {
          line: 77,
          column: 23
        }
      },
      "43": {
        start: {
          line: 81,
          column: 8
        },
        end: {
          line: 81,
          column: 23
        }
      },
      "44": {
        start: {
          line: 83,
          column: 26
        },
        end: {
          line: 104,
          column: 5
        }
      },
      "45": {
        start: {
          line: 84,
          column: 24
        },
        end: {
          line: 84,
          column: 26
        }
      },
      "46": {
        start: {
          line: 86,
          column: 25
        },
        end: {
          line: 86,
          column: 55
        }
      },
      "47": {
        start: {
          line: 87,
          column: 8
        },
        end: {
          line: 102,
          column: 11
        }
      },
      "48": {
        start: {
          line: 88,
          column: 26
        },
        end: {
          line: 88,
          column: 52
        }
      },
      "49": {
        start: {
          line: 89,
          column: 12
        },
        end: {
          line: 90,
          column: 23
        }
      },
      "50": {
        start: {
          line: 90,
          column: 16
        },
        end: {
          line: 90,
          column: 23
        }
      },
      "51": {
        start: {
          line: 91,
          column: 26
        },
        end: {
          line: 91,
          column: 97
        }
      },
      "52": {
        start: {
          line: 92,
          column: 28
        },
        end: {
          line: 92,
          column: 72
        }
      },
      "53": {
        start: {
          line: 93,
          column: 12
        },
        end: {
          line: 101,
          column: 13
        }
      },
      "54": {
        start: {
          line: 94,
          column: 16
        },
        end: {
          line: 100,
          column: 19
        }
      },
      "55": {
        start: {
          line: 103,
          column: 8
        },
        end: {
          line: 103,
          column: 23
        }
      },
      "56": {
        start: {
          line: 105,
          column: 27
        },
        end: {
          line: 130,
          column: 5
        }
      },
      "57": {
        start: {
          line: 106,
          column: 24
        },
        end: {
          line: 106,
          column: 26
        }
      },
      "58": {
        start: {
          line: 108,
          column: 25
        },
        end: {
          line: 108,
          column: 64
        }
      },
      "59": {
        start: {
          line: 109,
          column: 8
        },
        end: {
          line: 128,
          column: 11
        }
      },
      "60": {
        start: {
          line: 110,
          column: 28
        },
        end: {
          line: 110,
          column: 42
        }
      },
      "61": {
        start: {
          line: 111,
          column: 12
        },
        end: {
          line: 112,
          column: 23
        }
      },
      "62": {
        start: {
          line: 112,
          column: 16
        },
        end: {
          line: 112,
          column: 23
        }
      },
      "63": {
        start: {
          line: 114,
          column: 26
        },
        end: {
          line: 114,
          column: 45
        }
      },
      "64": {
        start: {
          line: 115,
          column: 24
        },
        end: {
          line: 115,
          column: 54
        }
      },
      "65": {
        start: {
          line: 116,
          column: 32
        },
        end: {
          line: 116,
          column: 39
        }
      },
      "66": {
        start: {
          line: 117,
          column: 12
        },
        end: {
          line: 120,
          column: 13
        }
      },
      "67": {
        start: {
          line: 118,
          column: 16
        },
        end: {
          line: 118,
          column: 62
        }
      },
      "68": {
        start: {
          line: 119,
          column: 16
        },
        end: {
          line: 119,
          column: 65
        }
      },
      "69": {
        start: {
          line: 121,
          column: 12
        },
        end: {
          line: 127,
          column: 15
        }
      },
      "70": {
        start: {
          line: 129,
          column: 8
        },
        end: {
          line: 129,
          column: 23
        }
      },
      "71": {
        start: {
          line: 131,
          column: 29
        },
        end: {
          line: 148,
          column: 5
        }
      },
      "72": {
        start: {
          line: 132,
          column: 26
        },
        end: {
          line: 132,
          column: 28
        }
      },
      "73": {
        start: {
          line: 134,
          column: 24
        },
        end: {
          line: 134,
          column: 57
        }
      },
      "74": {
        start: {
          line: 135,
          column: 8
        },
        end: {
          line: 146,
          column: 9
        }
      },
      "75": {
        start: {
          line: 136,
          column: 12
        },
        end: {
          line: 145,
          column: 15
        }
      },
      "76": {
        start: {
          line: 137,
          column: 32
        },
        end: {
          line: 137,
          column: 70
        }
      },
      "77": {
        start: {
          line: 138,
          column: 16
        },
        end: {
          line: 144,
          column: 18
        }
      },
      "78": {
        start: {
          line: 142,
          column: 49
        },
        end: {
          line: 142,
          column: 64
        }
      },
      "79": {
        start: {
          line: 147,
          column: 8
        },
        end: {
          line: 147,
          column: 25
        }
      },
      "80": {
        start: {
          line: 149,
          column: 25
        },
        end: {
          line: 156,
          column: 5
        }
      },
      "81": {
        start: {
          line: 150,
          column: 8
        },
        end: {
          line: 155,
          column: 9
        }
      },
      "82": {
        start: {
          line: 151,
          column: 12
        },
        end: {
          line: 151,
          column: 37
        }
      },
      "83": {
        start: {
          line: 152,
          column: 12
        },
        end: {
          line: 152,
          column: 22
        }
      },
      "84": {
        start: {
          line: 153,
          column: 12
        },
        end: {
          line: 153,
          column: 34
        }
      },
      "85": {
        start: {
          line: 154,
          column: 12
        },
        end: {
          line: 154,
          column: 29
        }
      },
      "86": {
        start: {
          line: 157,
          column: 24
        },
        end: {
          line: 161,
          column: 5
        }
      },
      "87": {
        start: {
          line: 158,
          column: 8
        },
        end: {
          line: 158,
          column: 30
        }
      },
      "88": {
        start: {
          line: 159,
          column: 8
        },
        end: {
          line: 159,
          column: 25
        }
      },
      "89": {
        start: {
          line: 160,
          column: 8
        },
        end: {
          line: 160,
          column: 18
        }
      },
      "90": {
        start: {
          line: 162,
          column: 4
        },
        end: {
          line: 176,
          column: 1860
        }
      },
      "91": {
        start: {
          line: 162,
          column: 1747
        },
        end: {
          line: 162,
          column: 1770
        }
      },
      "92": {
        start: {
          line: 164,
          column: 396
        },
        end: {
          line: 164,
          column: 419
        }
      },
      "93": {
        start: {
          line: 166,
          column: 390
        },
        end: {
          line: 166,
          column: 416
        }
      },
      "94": {
        start: {
          line: 168,
          column: 408
        },
        end: {
          line: 168,
          column: 433
        }
      },
      "95": {
        start: {
          line: 170,
          column: 640
        },
        end: {
          line: 170,
          column: 668
        }
      },
      "96": {
        start: {
          line: 176,
          column: 482
        },
        end: {
          line: 176,
          column: 1298
        }
      },
      "97": {
        start: {
          line: 176,
          column: 1404
        },
        end: {
          line: 176,
          column: 1425
        }
      }
    },
    fnMap: {
      "0": {
        name: "ImportModal",
        decl: {
          start: {
            line: 6,
            column: 24
          },
          end: {
            line: 6,
            column: 35
          }
        },
        loc: {
          start: {
            line: 6,
            column: 68
          },
          end: {
            line: 177,
            column: 1
          }
        },
        line: 6
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 11,
            column: 29
          },
          end: {
            line: 11,
            column: 30
          }
        },
        loc: {
          start: {
            line: 11,
            column: 46
          },
          end: {
            line: 40,
            column: 5
          }
        },
        line: 11
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 41,
            column: 29
          },
          end: {
            line: 41,
            column: 30
          }
        },
        loc: {
          start: {
            line: 41,
            column: 35
          },
          end: {
            line: 56,
            column: 5
          }
        },
        line: 41
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 57,
            column: 31
          },
          end: {
            line: 57,
            column: 32
          }
        },
        loc: {
          start: {
            line: 57,
            column: 41
          },
          end: {
            line: 82,
            column: 5
          }
        },
        line: 57
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 61,
            column: 39
          },
          end: {
            line: 61,
            column: 40
          }
        },
        loc: {
          start: {
            line: 61,
            column: 64
          },
          end: {
            line: 79,
            column: 13
          }
        },
        line: 61
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 65,
            column: 47
          },
          end: {
            line: 65,
            column: 48
          }
        },
        loc: {
          start: {
            line: 65,
            column: 60
          },
          end: {
            line: 69,
            column: 17
          }
        },
        line: 65
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 83,
            column: 26
          },
          end: {
            line: 83,
            column: 27
          }
        },
        loc: {
          start: {
            line: 83,
            column: 39
          },
          end: {
            line: 104,
            column: 5
          }
        },
        line: 83
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 87,
            column: 25
          },
          end: {
            line: 87,
            column: 26
          }
        },
        loc: {
          start: {
            line: 87,
            column: 45
          },
          end: {
            line: 102,
            column: 9
          }
        },
        line: 87
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 105,
            column: 27
          },
          end: {
            line: 105,
            column: 28
          }
        },
        loc: {
          start: {
            line: 105,
            column: 37
          },
          end: {
            line: 130,
            column: 5
          }
        },
        line: 105
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 109,
            column: 25
          },
          end: {
            line: 109,
            column: 26
          }
        },
        loc: {
          start: {
            line: 109,
            column: 45
          },
          end: {
            line: 128,
            column: 9
          }
        },
        line: 109
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 131,
            column: 29
          },
          end: {
            line: 131,
            column: 30
          }
        },
        loc: {
          start: {
            line: 131,
            column: 42
          },
          end: {
            line: 148,
            column: 5
          }
        },
        line: 131
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 136,
            column: 28
          },
          end: {
            line: 136,
            column: 29
          }
        },
        loc: {
          start: {
            line: 136,
            column: 39
          },
          end: {
            line: 145,
            column: 13
          }
        },
        line: 136
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 142,
            column: 42
          },
          end: {
            line: 142,
            column: 43
          }
        },
        loc: {
          start: {
            line: 142,
            column: 49
          },
          end: {
            line: 142,
            column: 64
          }
        },
        line: 142
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 149,
            column: 25
          },
          end: {
            line: 149,
            column: 26
          }
        },
        loc: {
          start: {
            line: 149,
            column: 31
          },
          end: {
            line: 156,
            column: 5
          }
        },
        line: 149
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 157,
            column: 24
          },
          end: {
            line: 157,
            column: 25
          }
        },
        loc: {
          start: {
            line: 157,
            column: 30
          },
          end: {
            line: 161,
            column: 5
          }
        },
        line: 157
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 162,
            column: 1741
          },
          end: {
            line: 162,
            column: 1742
          }
        },
        loc: {
          start: {
            line: 162,
            column: 1747
          },
          end: {
            line: 162,
            column: 1770
          }
        },
        line: 162
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 164,
            column: 390
          },
          end: {
            line: 164,
            column: 391
          }
        },
        loc: {
          start: {
            line: 164,
            column: 396
          },
          end: {
            line: 164,
            column: 419
          }
        },
        line: 164
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 166,
            column: 384
          },
          end: {
            line: 166,
            column: 385
          }
        },
        loc: {
          start: {
            line: 166,
            column: 390
          },
          end: {
            line: 166,
            column: 416
          }
        },
        line: 166
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 168,
            column: 402
          },
          end: {
            line: 168,
            column: 403
          }
        },
        loc: {
          start: {
            line: 168,
            column: 408
          },
          end: {
            line: 168,
            column: 433
          }
        },
        line: 168
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 170,
            column: 633
          },
          end: {
            line: 170,
            column: 634
          }
        },
        loc: {
          start: {
            line: 170,
            column: 640
          },
          end: {
            line: 170,
            column: 668
          }
        },
        line: 170
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 176,
            column: 462
          },
          end: {
            line: 176,
            column: 463
          }
        },
        loc: {
          start: {
            line: 176,
            column: 482
          },
          end: {
            line: 176,
            column: 1298
          }
        },
        line: 176
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 176,
            column: 1398
          },
          end: {
            line: 176,
            column: 1399
          }
        },
        loc: {
          start: {
            line: 176,
            column: 1404
          },
          end: {
            line: 176,
            column: 1425
          }
        },
        line: 176
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 13,
            column: 8
          },
          end: {
            line: 14,
            column: 19
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 13,
            column: 8
          },
          end: {
            line: 14,
            column: 19
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 13
      },
      "1": {
        loc: {
          start: {
            line: 18,
            column: 12
          },
          end: {
            line: 31,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 18,
            column: 12
          },
          end: {
            line: 31,
            column: 13
          }
        }, {
          start: {
            line: 24,
            column: 17
          },
          end: {
            line: 31,
            column: 13
          }
        }],
        line: 18
      },
      "2": {
        loc: {
          start: {
            line: 24,
            column: 17
          },
          end: {
            line: 31,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 24,
            column: 17
          },
          end: {
            line: 31,
            column: 13
          }
        }, {
          start: {
            line: 29,
            column: 17
          },
          end: {
            line: 31,
            column: 13
          }
        }],
        line: 24
      },
      "3": {
        loc: {
          start: {
            line: 24,
            column: 21
          },
          end: {
            line: 24,
            column: 76
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 24,
            column: 21
          },
          end: {
            line: 24,
            column: 47
          }
        }, {
          start: {
            line: 24,
            column: 51
          },
          end: {
            line: 24,
            column: 76
          }
        }],
        line: 24
      },
      "4": {
        loc: {
          start: {
            line: 42,
            column: 8
          },
          end: {
            line: 43,
            column: 19
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 42,
            column: 8
          },
          end: {
            line: 43,
            column: 19
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 42
      },
      "5": {
        loc: {
          start: {
            line: 60,
            column: 8
          },
          end: {
            line: 80,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 60,
            column: 8
          },
          end: {
            line: 80,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 60
      },
      "6": {
        loc: {
          start: {
            line: 62,
            column: 30
          },
          end: {
            line: 62,
            column: 80
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 62,
            column: 30
          },
          end: {
            line: 62,
            column: 48
          }
        }, {
          start: {
            line: 62,
            column: 52
          },
          end: {
            line: 62,
            column: 80
          }
        }],
        line: 62
      },
      "7": {
        loc: {
          start: {
            line: 66,
            column: 20
          },
          end: {
            line: 68,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 66,
            column: 20
          },
          end: {
            line: 68,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 66
      },
      "8": {
        loc: {
          start: {
            line: 66,
            column: 24
          },
          end: {
            line: 66,
            column: 68
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 66,
            column: 24
          },
          end: {
            line: 66,
            column: 49
          }
        }, {
          start: {
            line: 66,
            column: 53
          },
          end: {
            line: 66,
            column: 68
          }
        }],
        line: 66
      },
      "9": {
        loc: {
          start: {
            line: 70,
            column: 16
          },
          end: {
            line: 78,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 70,
            column: 16
          },
          end: {
            line: 78,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 70
      },
      "10": {
        loc: {
          start: {
            line: 89,
            column: 12
          },
          end: {
            line: 90,
            column: 23
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 89,
            column: 12
          },
          end: {
            line: 90,
            column: 23
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 89
      },
      "11": {
        loc: {
          start: {
            line: 91,
            column: 26
          },
          end: {
            line: 91,
            column: 97
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 91,
            column: 26
          },
          end: {
            line: 91,
            column: 63
          }
        }, {
          start: {
            line: 91,
            column: 67
          },
          end: {
            line: 91,
            column: 97
          }
        }],
        line: 91
      },
      "12": {
        loc: {
          start: {
            line: 92,
            column: 28
          },
          end: {
            line: 92,
            column: 72
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 92,
            column: 28
          },
          end: {
            line: 92,
            column: 60
          }
        }, {
          start: {
            line: 92,
            column: 64
          },
          end: {
            line: 92,
            column: 72
          }
        }],
        line: 92
      },
      "13": {
        loc: {
          start: {
            line: 93,
            column: 12
          },
          end: {
            line: 101,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 93,
            column: 12
          },
          end: {
            line: 101,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 93
      },
      "14": {
        loc: {
          start: {
            line: 111,
            column: 12
          },
          end: {
            line: 112,
            column: 23
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 111,
            column: 12
          },
          end: {
            line: 112,
            column: 23
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 111
      },
      "15": {
        loc: {
          start: {
            line: 117,
            column: 12
          },
          end: {
            line: 120,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 117,
            column: 12
          },
          end: {
            line: 120,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 117
      },
      "16": {
        loc: {
          start: {
            line: 117,
            column: 16
          },
          end: {
            line: 117,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 117,
            column: 16
          },
          end: {
            line: 117,
            column: 37
          }
        }, {
          start: {
            line: 117,
            column: 41
          },
          end: {
            line: 117,
            column: 57
          }
        }],
        line: 117
      },
      "17": {
        loc: {
          start: {
            line: 135,
            column: 8
          },
          end: {
            line: 146,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 135,
            column: 8
          },
          end: {
            line: 146,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 135
      },
      "18": {
        loc: {
          start: {
            line: 150,
            column: 8
          },
          end: {
            line: 155,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 150,
            column: 8
          },
          end: {
            line: 155,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 150
      },
      "19": {
        loc: {
          start: {
            line: 162,
            column: 1445
          },
          end: {
            line: 176,
            column: 1838
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 162,
            column: 1476
          },
          end: {
            line: 174,
            column: 324
          }
        }, {
          start: {
            line: 176,
            column: 36
          },
          end: {
            line: 176,
            column: 1837
          }
        }],
        line: 162
      },
      "20": {
        loc: {
          start: {
            line: 162,
            column: 1820
          },
          end: {
            line: 164,
            column: 109
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 163,
            column: 70
          },
          end: {
            line: 163,
            column: 102
          }
        }, {
          start: {
            line: 164,
            column: 70
          },
          end: {
            line: 164,
            column: 109
          }
        }],
        line: 162
      },
      "21": {
        loc: {
          start: {
            line: 164,
            column: 469
          },
          end: {
            line: 166,
            column: 109
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 165,
            column: 70
          },
          end: {
            line: 165,
            column: 102
          }
        }, {
          start: {
            line: 166,
            column: 70
          },
          end: {
            line: 166,
            column: 109
          }
        }],
        line: 164
      },
      "22": {
        loc: {
          start: {
            line: 166,
            column: 466
          },
          end: {
            line: 168,
            column: 109
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 167,
            column: 70
          },
          end: {
            line: 167,
            column: 102
          }
        }, {
          start: {
            line: 168,
            column: 70
          },
          end: {
            line: 168,
            column: 109
          }
        }],
        line: 166
      },
      "23": {
        loc: {
          start: {
            line: 168,
            column: 483
          },
          end: {
            line: 170,
            column: 109
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 169,
            column: 70
          },
          end: {
            line: 169,
            column: 102
          }
        }, {
          start: {
            line: 170,
            column: 70
          },
          end: {
            line: 170,
            column: 109
          }
        }],
        line: 168
      },
      "24": {
        loc: {
          start: {
            line: 170,
            column: 416
          },
          end: {
            line: 170,
            column: 1000
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 170,
            column: 416
          },
          end: {
            line: 170,
            column: 439
          }
        }, {
          start: {
            line: 170,
            column: 444
          },
          end: {
            line: 170,
            column: 999
          }
        }],
        line: 170
      },
      "25": {
        loc: {
          start: {
            line: 170,
            column: 1002
          },
          end: {
            line: 170,
            column: 1586
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 170,
            column: 1002
          },
          end: {
            line: 170,
            column: 1025
          }
        }, {
          start: {
            line: 170,
            column: 1030
          },
          end: {
            line: 170,
            column: 1585
          }
        }],
        line: 170
      },
      "26": {
        loc: {
          start: {
            line: 170,
            column: 1588
          },
          end: {
            line: 173,
            column: 708
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 170,
            column: 1589
          },
          end: {
            line: 170,
            column: 1615
          }
        }, {
          start: {
            line: 171,
            column: 56
          },
          end: {
            line: 171,
            column: 81
          }
        }, {
          start: {
            line: 171,
            column: 87
          },
          end: {
            line: 173,
            column: 707
          }
        }],
        line: 170
      },
      "27": {
        loc: {
          start: {
            line: 171,
            column: 244
          },
          end: {
            line: 173,
            column: 99
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 172,
            column: 70
          },
          end: {
            line: 172,
            column: 100
          }
        }, {
          start: {
            line: 173,
            column: 70
          },
          end: {
            line: 173,
            column: 99
          }
        }],
        line: 171
      },
      "28": {
        loc: {
          start: {
            line: 173,
            column: 198
          },
          end: {
            line: 173,
            column: 700
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 173,
            column: 228
          },
          end: {
            line: 173,
            column: 485
          }
        }, {
          start: {
            line: 173,
            column: 490
          },
          end: {
            line: 173,
            column: 699
          }
        }],
        line: 173
      },
      "29": {
        loc: {
          start: {
            line: 173,
            column: 992
          },
          end: {
            line: 173,
            column: 1046
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 173,
            column: 1018
          },
          end: {
            line: 173,
            column: 1034
          }
        }, {
          start: {
            line: 173,
            column: 1037
          },
          end: {
            line: 173,
            column: 1046
          }
        }],
        line: 173
      },
      "30": {
        loc: {
          start: {
            line: 173,
            column: 1058
          },
          end: {
            line: 174,
            column: 106
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 173,
            column: 1058
          },
          end: {
            line: 173,
            column: 1070
          }
        }, {
          start: {
            line: 174,
            column: 61
          },
          end: {
            line: 174,
            column: 84
          }
        }, {
          start: {
            line: 174,
            column: 88
          },
          end: {
            line: 174,
            column: 105
          }
        }],
        line: 173
      },
      "31": {
        loc: {
          start: {
            line: 174,
            column: 264
          },
          end: {
            line: 174,
            column: 313
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 174,
            column: 279
          },
          end: {
            line: 174,
            column: 294
          }
        }, {
          start: {
            line: 174,
            column: 297
          },
          end: {
            line: 174,
            column: 313
          }
        }],
        line: 174
      },
      "32": {
        loc: {
          start: {
            line: 176,
            column: 303
          },
          end: {
            line: 176,
            column: 341
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 176,
            column: 333
          },
          end: {
            line: 176,
            column: 336
          }
        }, {
          start: {
            line: 176,
            column: 339
          },
          end: {
            line: 176,
            column: 341
          }
        }],
        line: 176
      },
      "33": {
        loc: {
          start: {
            line: 176,
            column: 1057
          },
          end: {
            line: 176,
            column: 1287
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 176,
            column: 1057
          },
          end: {
            line: 176,
            column: 1103
          }
        }, {
          start: {
            line: 176,
            column: 1108
          },
          end: {
            line: 176,
            column: 1286
          }
        }],
        line: 176
      },
      "34": {
        loc: {
          start: {
            line: 176,
            column: 1069
          },
          end: {
            line: 176,
            column: 1091
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 176,
            column: 1069
          },
          end: {
            line: 176,
            column: 1085
          }
        }, {
          start: {
            line: 176,
            column: 1089
          },
          end: {
            line: 176,
            column: 1091
          }
        }],
        line: 176
      },
      "35": {
        loc: {
          start: {
            line: 176,
            column: 1245
          },
          end: {
            line: 176,
            column: 1267
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 176,
            column: 1245
          },
          end: {
            line: 176,
            column: 1261
          }
        }, {
          start: {
            line: 176,
            column: 1265
          },
          end: {
            line: 176,
            column: 1267
          }
        }],
        line: 176
      },
      "36": {
        loc: {
          start: {
            line: 176,
            column: 1787
          },
          end: {
            line: 176,
            column: 1825
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 176,
            column: 1817
          },
          end: {
            line: 176,
            column: 1820
          }
        }, {
          start: {
            line: 176,
            column: 1823
          },
          end: {
            line: 176,
            column: 1825
          }
        }],
        line: 176
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/vedprakashmishra/sutra/src/components/collections/ImportModal.tsx",
      mappings: "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",
      names: [],
      sources: ["/Users/vedprakashmishra/sutra/src/components/collections/ImportModal.tsx"],
      sourcesContent: ["import React, { useState } from \"react\";\nimport { Dialog, Transition } from \"@headlessui/react\";\nimport { Fragment } from \"react\";\nimport {\n  XMarkIcon,\n  DocumentArrowUpIcon,\n  ClipboardDocumentIcon,\n  ChatBubbleLeftRightIcon,\n  CodeBracketIcon,\n} from \"@heroicons/react/24/outline\";\n\ninterface ImportModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onImport: (prompts: ImportedPrompt[]) => void;\n}\n\ninterface ImportedPrompt {\n  title: string;\n  content: string;\n  description?: string;\n  source: string;\n  variables?: Record<string, any>;\n}\n\nexport default function ImportModal({\n  isOpen,\n  onClose,\n  onImport,\n}: ImportModalProps) {\n  const [importMethod, setImportMethod] = useState<\n    \"file\" | \"text\" | \"chatgpt\" | \"gemini\"\n  >(\"text\");\n  const [textInput, setTextInput] = useState(\"\");\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [previewPrompts, setPreviewPrompts] = useState<ImportedPrompt[]>([]);\n\n  const handleFileUpload = async (\n    event: React.ChangeEvent<HTMLInputElement>,\n  ) => {\n    const file = event.target.files?.[0];\n    if (!file) return;\n\n    try {\n      setIsProcessing(true);\n      const content = await file.text();\n\n      if (file.name.endsWith(\".json\")) {\n        // Handle JSON format (ChatGPT export format)\n        const data = JSON.parse(content);\n        const prompts = parseChatGPTExport(data);\n        setPreviewPrompts(prompts);\n      } else if (file.name.endsWith(\".txt\") || file.name.endsWith(\".md\")) {\n        // Handle text/markdown files\n        const prompts = parseTextFile(content);\n        setPreviewPrompts(prompts);\n      } else {\n        alert(\"Unsupported file format. Please use JSON, TXT, or MD files.\");\n      }\n    } catch (error) {\n      console.error(\"Error processing file:\", error);\n      alert(\"Error processing file. Please check the format and try again.\");\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  const handleTextImport = () => {\n    if (!textInput.trim()) return;\n\n    setIsProcessing(true);\n    try {\n      const prompts = parseTextInput(textInput);\n      setPreviewPrompts(prompts);\n    } catch (error) {\n      console.error(\"Error parsing text:\", error);\n      alert(\"Error parsing text. Please check the format and try again.\");\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  const parseChatGPTExport = (data: any): ImportedPrompt[] => {\n    // Parse ChatGPT export format\n    const prompts: ImportedPrompt[] = [];\n\n    if (data.conversations) {\n      data.conversations.forEach((conversation: any, index: number) => {\n        const title = conversation.title || `Imported Chat ${index + 1}`;\n        let content = \"\";\n\n        // Extract user messages that look like prompts\n        conversation.messages?.forEach((message: any) => {\n          if (message.author === \"user\" && message.content) {\n            content += message.content + \"\\n\\n\";\n          }\n        });\n\n        if (content.trim()) {\n          prompts.push({\n            title,\n            content: content.trim(),\n            description: `Imported from ChatGPT conversation`,\n            source: \"ChatGPT\",\n            variables: extractVariables(content),\n          });\n        }\n      });\n    }\n\n    return prompts;\n  };\n\n  const parseTextFile = (content: string): ImportedPrompt[] => {\n    const prompts: ImportedPrompt[] = [];\n\n    // Split by double newlines or markdown headers\n    const sections = content.split(/\\n\\n+|\\n#+\\s/g);\n\n    sections.forEach((section, index) => {\n      const lines = section.trim().split(\"\\n\");\n      if (lines.length === 0) return;\n\n      const title =\n        lines[0].replace(/^#+\\s*/, \"\").trim() || `Imported Prompt ${index + 1}`;\n      const content = lines.slice(1).join(\"\\n\").trim() || lines[0];\n\n      if (content) {\n        prompts.push({\n          title,\n          content,\n          description: `Imported from text file`,\n          source: \"Text File\",\n          variables: extractVariables(content),\n        });\n      }\n    });\n\n    return prompts;\n  };\n\n  const parseTextInput = (text: string): ImportedPrompt[] => {\n    const prompts: ImportedPrompt[] = [];\n\n    // Try to split by common separators\n    const sections = text.split(/\\n---+\\n|\\n===+\\n|\\n\\n\\n+/);\n\n    sections.forEach((section, index) => {\n      const content = section.trim();\n      if (!content) return;\n\n      // Try to extract title from first line if it looks like a header\n      const lines = content.split(\"\\n\");\n      let title = `Imported Prompt ${index + 1}`;\n      let promptContent = content;\n\n      if (lines[0].length < 100 && lines.length > 1) {\n        title = lines[0].replace(/^#+\\s*/, \"\").trim();\n        promptContent = lines.slice(1).join(\"\\n\").trim();\n      }\n\n      prompts.push({\n        title,\n        content: promptContent,\n        description: \"Imported from manual input\",\n        source: \"Manual Input\",\n        variables: extractVariables(promptContent),\n      });\n    });\n\n    return prompts;\n  };\n\n  const extractVariables = (content: string): Record<string, any> => {\n    const variables: Record<string, any> = {};\n\n    // Look for {{variable}} patterns\n    const matches = content.match(/\\{\\{([^}]+)\\}\\}/g);\n    if (matches) {\n      matches.forEach((match) => {\n        const varName = match.replace(/\\{\\{|\\}\\}/g, \"\").trim();\n        variables[varName] = {\n          type: \"string\",\n          label: varName\n            .replace(/_/g, \" \")\n            .replace(/\\b\\w/g, (l) => l.toUpperCase()),\n          description: `Variable extracted from prompt`,\n        };\n      });\n    }\n\n    return variables;\n  };\n\n  const handleImport = () => {\n    if (previewPrompts.length > 0) {\n      onImport(previewPrompts);\n      onClose();\n      setPreviewPrompts([]);\n      setTextInput(\"\");\n    }\n  };\n\n  const handleClose = () => {\n    setPreviewPrompts([]);\n    setTextInput(\"\");\n    onClose();\n  };\n\n  return (\n    <Transition appear show={isOpen} as={Fragment}>\n      <Dialog as=\"div\" className=\"relative z-50\" onClose={handleClose}>\n        <Transition.Child\n          as={Fragment}\n          enter=\"ease-out duration-300\"\n          enterFrom=\"opacity-0\"\n          enterTo=\"opacity-100\"\n          leave=\"ease-in duration-200\"\n          leaveFrom=\"opacity-100\"\n          leaveTo=\"opacity-0\"\n        >\n          <div className=\"fixed inset-0 bg-black bg-opacity-25\" />\n        </Transition.Child>\n\n        <div className=\"fixed inset-0 overflow-y-auto\">\n          <div className=\"flex min-h-full items-center justify-center p-4 text-center\">\n            <Transition.Child\n              as={Fragment}\n              enter=\"ease-out duration-300\"\n              enterFrom=\"opacity-0 scale-95\"\n              enterTo=\"opacity-100 scale-100\"\n              leave=\"ease-in duration-200\"\n              leaveFrom=\"opacity-100 scale-100\"\n              leaveTo=\"opacity-0 scale-95\"\n            >\n              <Dialog.Panel className=\"w-full max-w-4xl transform overflow-hidden rounded-2xl bg-white p-6 text-left align-middle shadow-xl transition-all\">\n                <div className=\"flex items-center justify-between mb-6\">\n                  <Dialog.Title\n                    as=\"h3\"\n                    className=\"text-lg font-medium leading-6 text-gray-900\"\n                  >\n                    Import Prompts\n                  </Dialog.Title>\n                  <button\n                    onClick={handleClose}\n                    className=\"rounded-md bg-white text-gray-400 hover:text-gray-500 focus:outline-none focus:ring-2 focus:ring-indigo-500\"\n                  >\n                    <XMarkIcon className=\"h-6 w-6\" />\n                  </button>\n                </div>\n\n                {previewPrompts.length === 0 ? (\n                  <div>\n                    {/* Import Method Selection */}\n                    <div className=\"mb-6\">\n                      <h4 className=\"text-sm font-medium text-gray-900 mb-3\">\n                        Choose import method:\n                      </h4>\n                      <div className=\"grid grid-cols-2 gap-3\">\n                        <button\n                          onClick={() => setImportMethod(\"text\")}\n                          className={`p-4 border-2 rounded-lg text-left ${\n                            importMethod === \"text\"\n                              ? \"border-indigo-500 bg-indigo-50\"\n                              : \"border-gray-200 hover:border-gray-300\"\n                          }`}\n                        >\n                          <ClipboardDocumentIcon className=\"h-6 w-6 text-gray-600 mb-2\" />\n                          <div className=\"font-medium\">Paste Text</div>\n                          <div className=\"text-sm text-gray-500\">\n                            Copy and paste your prompts\n                          </div>\n                        </button>\n\n                        <button\n                          onClick={() => setImportMethod(\"file\")}\n                          className={`p-4 border-2 rounded-lg text-left ${\n                            importMethod === \"file\"\n                              ? \"border-indigo-500 bg-indigo-50\"\n                              : \"border-gray-200 hover:border-gray-300\"\n                          }`}\n                        >\n                          <DocumentArrowUpIcon className=\"h-6 w-6 text-gray-600 mb-2\" />\n                          <div className=\"font-medium\">Upload File</div>\n                          <div className=\"text-sm text-gray-500\">\n                            JSON, TXT, or MD files\n                          </div>\n                        </button>\n\n                        <button\n                          onClick={() => setImportMethod(\"chatgpt\")}\n                          className={`p-4 border-2 rounded-lg text-left ${\n                            importMethod === \"chatgpt\"\n                              ? \"border-indigo-500 bg-indigo-50\"\n                              : \"border-gray-200 hover:border-gray-300\"\n                          }`}\n                        >\n                          <ChatBubbleLeftRightIcon className=\"h-6 w-6 text-gray-600 mb-2\" />\n                          <div className=\"font-medium\">ChatGPT Export</div>\n                          <div className=\"text-sm text-gray-500\">\n                            Import from ChatGPT conversations\n                          </div>\n                        </button>\n\n                        <button\n                          onClick={() => setImportMethod(\"gemini\")}\n                          className={`p-4 border-2 rounded-lg text-left ${\n                            importMethod === \"gemini\"\n                              ? \"border-indigo-500 bg-indigo-50\"\n                              : \"border-gray-200 hover:border-gray-300\"\n                          }`}\n                        >\n                          <CodeBracketIcon className=\"h-6 w-6 text-gray-600 mb-2\" />\n                          <div className=\"font-medium\">Gemini Export</div>\n                          <div className=\"text-sm text-gray-500\">\n                            Import from Google Gemini\n                          </div>\n                        </button>\n                      </div>\n                    </div>\n\n                    {/* Import Content */}\n                    <div className=\"space-y-4\">\n                      {importMethod === \"text\" && (\n                        <div>\n                          <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                            Paste your prompts here:\n                          </label>\n                          <textarea\n                            value={textInput}\n                            onChange={(e) => setTextInput(e.target.value)}\n                            rows={10}\n                            className=\"block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500\"\n                            placeholder=\"Paste multiple prompts separated by --- or empty lines...\"\n                          />\n                          <p className=\"mt-2 text-sm text-gray-500\">\n                            Separate multiple prompts with \"---\" or double line\n                            breaks\n                          </p>\n                        </div>\n                      )}\n\n                      {importMethod === \"file\" && (\n                        <div>\n                          <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                            Choose file to upload:\n                          </label>\n                          <input\n                            type=\"file\"\n                            accept=\".json,.txt,.md\"\n                            onChange={handleFileUpload}\n                            className=\"block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-indigo-50 file:text-indigo-700 hover:file:bg-indigo-100\"\n                          />\n                          <p className=\"mt-2 text-sm text-gray-500\">\n                            Supported formats: JSON (ChatGPT export), TXT, MD\n                          </p>\n                        </div>\n                      )}\n\n                      {(importMethod === \"chatgpt\" ||\n                        importMethod === \"gemini\") && (\n                        <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4\">\n                          <h5 className=\"font-medium text-blue-900 mb-2\">\n                            {importMethod === \"chatgpt\"\n                              ? \"ChatGPT Export Instructions:\"\n                              : \"Gemini Export Instructions:\"}\n                          </h5>\n                          <ol className=\"text-sm text-blue-800 space-y-1 list-decimal list-inside\">\n                            {importMethod === \"chatgpt\" ? (\n                              <>\n                                <li>Go to ChatGPT Settings \u2192 Data Controls</li>\n                                <li>\n                                  Click \"Export data\" and download your\n                                  conversations\n                                </li>\n                                <li>Upload the conversations.json file here</li>\n                              </>\n                            ) : (\n                              <>\n                                <li>Go to Gemini activity page</li>\n                                <li>Export your conversation history</li>\n                                <li>Upload the exported file here</li>\n                              </>\n                            )}\n                          </ol>\n                        </div>\n                      )}\n                    </div>\n\n                    <div className=\"flex justify-end space-x-3 mt-6\">\n                      <button\n                        onClick={handleClose}\n                        className=\"px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50\"\n                      >\n                        Cancel\n                      </button>\n                      <button\n                        onClick={\n                          importMethod === \"text\" ? handleTextImport : undefined\n                        }\n                        disabled={\n                          isProcessing ||\n                          (importMethod === \"text\" && !textInput.trim())\n                        }\n                        className=\"px-4 py-2 text-sm font-medium text-white bg-indigo-600 border border-transparent rounded-md hover:bg-indigo-700 disabled:opacity-50\"\n                      >\n                        {isProcessing ? \"Processing...\" : \"Preview Import\"}\n                      </button>\n                    </div>\n                  </div>\n                ) : (\n                  /* Preview Screen */\n                  <div>\n                    <div className=\"mb-4\">\n                      <h4 className=\"text-lg font-medium text-gray-900\">\n                        Import Preview\n                      </h4>\n                      <p className=\"text-sm text-gray-600\">\n                        Found {previewPrompts.length} prompt\n                        {previewPrompts.length !== 1 ? \"s\" : \"\"} to import\n                      </p>\n                    </div>\n\n                    <div className=\"max-h-96 overflow-y-auto space-y-4 mb-6\">\n                      {previewPrompts.map((prompt, index) => (\n                        <div\n                          key={index}\n                          className=\"border border-gray-200 rounded-lg p-4\"\n                        >\n                          <div className=\"flex items-start justify-between mb-2\">\n                            <h5 className=\"font-medium text-gray-900\">\n                              {prompt.title}\n                            </h5>\n                            <span className=\"text-xs bg-gray-100 text-gray-600 px-2 py-1 rounded\">\n                              {prompt.source}\n                            </span>\n                          </div>\n                          <p className=\"text-sm text-gray-600 mb-2\">\n                            {prompt.description}\n                          </p>\n                          <div className=\"bg-gray-50 rounded p-3 text-sm\">\n                            <p className=\"line-clamp-3\">{prompt.content}</p>\n                          </div>\n                          {Object.keys(prompt.variables || {}).length > 0 && (\n                            <div className=\"mt-2\">\n                              <span className=\"text-xs text-gray-500\">\n                                Variables:{\" \"}\n                                {Object.keys(prompt.variables || {}).join(\", \")}\n                              </span>\n                            </div>\n                          )}\n                        </div>\n                      ))}\n                    </div>\n\n                    <div className=\"flex justify-end space-x-3\">\n                      <button\n                        onClick={() => setPreviewPrompts([])}\n                        className=\"px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50\"\n                      >\n                        Back\n                      </button>\n                      <button\n                        onClick={handleImport}\n                        className=\"px-4 py-2 text-sm font-medium text-white bg-green-600 border border-transparent rounded-md hover:bg-green-700\"\n                      >\n                        Import {previewPrompts.length} Prompt\n                        {previewPrompts.length !== 1 ? \"s\" : \"\"}\n                      </button>\n                    </div>\n                  </div>\n                )}\n              </Dialog.Panel>\n            </Transition.Child>\n          </div>\n        </div>\n      </Dialog>\n    </Transition>\n  );\n}\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "fcedf225b21d589bb148b29d4329cf7d8c96f775"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_jcnotovwt = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_jcnotovwt();
import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
import React, { useState } from "react";
import { Dialog, Transition } from "@headlessui/react";
import { Fragment } from "react";
import { XMarkIcon, DocumentArrowUpIcon, ClipboardDocumentIcon, ChatBubbleLeftRightIcon, CodeBracketIcon } from "@heroicons/react/24/outline";
export default function ImportModal({
  isOpen,
  onClose,
  onImport
}) {
  /* istanbul ignore next */
  cov_jcnotovwt().f[0]++;
  const [importMethod, setImportMethod] =
  /* istanbul ignore next */
  (cov_jcnotovwt().s[0]++, useState("text"));
  const [textInput, setTextInput] =
  /* istanbul ignore next */
  (cov_jcnotovwt().s[1]++, useState(""));
  const [isProcessing, setIsProcessing] =
  /* istanbul ignore next */
  (cov_jcnotovwt().s[2]++, useState(false));
  const [previewPrompts, setPreviewPrompts] =
  /* istanbul ignore next */
  (cov_jcnotovwt().s[3]++, useState([]));
  /* istanbul ignore next */
  cov_jcnotovwt().s[4]++;
  const handleFileUpload = async event => {
    /* istanbul ignore next */
    cov_jcnotovwt().f[1]++;
    const file =
    /* istanbul ignore next */
    (cov_jcnotovwt().s[5]++, event.target.files?.[0]);
    /* istanbul ignore next */
    cov_jcnotovwt().s[6]++;
    if (!file) {
      /* istanbul ignore next */
      cov_jcnotovwt().b[0][0]++;
      cov_jcnotovwt().s[7]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_jcnotovwt().b[0][1]++;
    }
    cov_jcnotovwt().s[8]++;
    try {
      /* istanbul ignore next */
      cov_jcnotovwt().s[9]++;
      setIsProcessing(true);
      const content =
      /* istanbul ignore next */
      (cov_jcnotovwt().s[10]++, await file.text());
      /* istanbul ignore next */
      cov_jcnotovwt().s[11]++;
      if (file.name.endsWith(".json")) {
        /* istanbul ignore next */
        cov_jcnotovwt().b[1][0]++;
        // Handle JSON format (ChatGPT export format)
        const data =
        /* istanbul ignore next */
        (cov_jcnotovwt().s[12]++, JSON.parse(content));
        const prompts =
        /* istanbul ignore next */
        (cov_jcnotovwt().s[13]++, parseChatGPTExport(data));
        /* istanbul ignore next */
        cov_jcnotovwt().s[14]++;
        setPreviewPrompts(prompts);
      } else {
        /* istanbul ignore next */
        cov_jcnotovwt().b[1][1]++;
        cov_jcnotovwt().s[15]++;
        if (
        /* istanbul ignore next */
        (cov_jcnotovwt().b[3][0]++, file.name.endsWith(".txt")) ||
        /* istanbul ignore next */
        (cov_jcnotovwt().b[3][1]++, file.name.endsWith(".md"))) {
          /* istanbul ignore next */
          cov_jcnotovwt().b[2][0]++;
          // Handle text/markdown files
          const prompts =
          /* istanbul ignore next */
          (cov_jcnotovwt().s[16]++, parseTextFile(content));
          /* istanbul ignore next */
          cov_jcnotovwt().s[17]++;
          setPreviewPrompts(prompts);
        } else {
          /* istanbul ignore next */
          cov_jcnotovwt().b[2][1]++;
          cov_jcnotovwt().s[18]++;
          alert("Unsupported file format. Please use JSON, TXT, or MD files.");
        }
      }
    } catch (error) {
      /* istanbul ignore next */
      cov_jcnotovwt().s[19]++;
      console.error("Error processing file:", error);
      /* istanbul ignore next */
      cov_jcnotovwt().s[20]++;
      alert("Error processing file. Please check the format and try again.");
    } finally {
      /* istanbul ignore next */
      cov_jcnotovwt().s[21]++;
      setIsProcessing(false);
    }
  };
  /* istanbul ignore next */
  cov_jcnotovwt().s[22]++;
  const handleTextImport = () => {
    /* istanbul ignore next */
    cov_jcnotovwt().f[2]++;
    cov_jcnotovwt().s[23]++;
    if (!textInput.trim()) {
      /* istanbul ignore next */
      cov_jcnotovwt().b[4][0]++;
      cov_jcnotovwt().s[24]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_jcnotovwt().b[4][1]++;
    }
    cov_jcnotovwt().s[25]++;
    setIsProcessing(true);
    /* istanbul ignore next */
    cov_jcnotovwt().s[26]++;
    try {
      const prompts =
      /* istanbul ignore next */
      (cov_jcnotovwt().s[27]++, parseTextInput(textInput));
      /* istanbul ignore next */
      cov_jcnotovwt().s[28]++;
      setPreviewPrompts(prompts);
    } catch (error) {
      /* istanbul ignore next */
      cov_jcnotovwt().s[29]++;
      console.error("Error parsing text:", error);
      /* istanbul ignore next */
      cov_jcnotovwt().s[30]++;
      alert("Error parsing text. Please check the format and try again.");
    } finally {
      /* istanbul ignore next */
      cov_jcnotovwt().s[31]++;
      setIsProcessing(false);
    }
  };
  /* istanbul ignore next */
  cov_jcnotovwt().s[32]++;
  const parseChatGPTExport = data => {
    /* istanbul ignore next */
    cov_jcnotovwt().f[3]++;
    // Parse ChatGPT export format
    const prompts =
    /* istanbul ignore next */
    (cov_jcnotovwt().s[33]++, []);
    /* istanbul ignore next */
    cov_jcnotovwt().s[34]++;
    if (data.conversations) {
      /* istanbul ignore next */
      cov_jcnotovwt().b[5][0]++;
      cov_jcnotovwt().s[35]++;
      data.conversations.forEach((conversation, index) => {
        /* istanbul ignore next */
        cov_jcnotovwt().f[4]++;
        const title =
        /* istanbul ignore next */
        (cov_jcnotovwt().s[36]++,
        /* istanbul ignore next */
        (cov_jcnotovwt().b[6][0]++, conversation.title) ||
        /* istanbul ignore next */
        (cov_jcnotovwt().b[6][1]++, `Imported Chat ${index + 1}`));
        let content =
        /* istanbul ignore next */
        (cov_jcnotovwt().s[37]++, "");
        // Extract user messages that look like prompts
        /* istanbul ignore next */
        cov_jcnotovwt().s[38]++;
        conversation.messages?.forEach(message => {
          /* istanbul ignore next */
          cov_jcnotovwt().f[5]++;
          cov_jcnotovwt().s[39]++;
          if (
          /* istanbul ignore next */
          (cov_jcnotovwt().b[8][0]++, message.author === "user") &&
          /* istanbul ignore next */
          (cov_jcnotovwt().b[8][1]++, message.content)) {
            /* istanbul ignore next */
            cov_jcnotovwt().b[7][0]++;
            cov_jcnotovwt().s[40]++;
            content += message.content + "\n\n";
          } else
          /* istanbul ignore next */
          {
            cov_jcnotovwt().b[7][1]++;
          }
        });
        /* istanbul ignore next */
        cov_jcnotovwt().s[41]++;
        if (content.trim()) {
          /* istanbul ignore next */
          cov_jcnotovwt().b[9][0]++;
          cov_jcnotovwt().s[42]++;
          prompts.push({
            title,
            content: content.trim(),
            description: `Imported from ChatGPT conversation`,
            source: "ChatGPT",
            variables: extractVariables(content)
          });
        } else
        /* istanbul ignore next */
        {
          cov_jcnotovwt().b[9][1]++;
        }
      });
    } else
    /* istanbul ignore next */
    {
      cov_jcnotovwt().b[5][1]++;
    }
    cov_jcnotovwt().s[43]++;
    return prompts;
  };
  /* istanbul ignore next */
  cov_jcnotovwt().s[44]++;
  const parseTextFile = content => {
    /* istanbul ignore next */
    cov_jcnotovwt().f[6]++;
    const prompts =
    /* istanbul ignore next */
    (cov_jcnotovwt().s[45]++, []);
    // Split by double newlines or markdown headers
    const sections =
    /* istanbul ignore next */
    (cov_jcnotovwt().s[46]++, content.split(/\n\n+|\n#+\s/g));
    /* istanbul ignore next */
    cov_jcnotovwt().s[47]++;
    sections.forEach((section, index) => {
      /* istanbul ignore next */
      cov_jcnotovwt().f[7]++;
      const lines =
      /* istanbul ignore next */
      (cov_jcnotovwt().s[48]++, section.trim().split("\n"));
      /* istanbul ignore next */
      cov_jcnotovwt().s[49]++;
      if (lines.length === 0) {
        /* istanbul ignore next */
        cov_jcnotovwt().b[10][0]++;
        cov_jcnotovwt().s[50]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_jcnotovwt().b[10][1]++;
      }
      const title =
      /* istanbul ignore next */
      (cov_jcnotovwt().s[51]++,
      /* istanbul ignore next */
      (cov_jcnotovwt().b[11][0]++, lines[0].replace(/^#+\s*/, "").trim()) ||
      /* istanbul ignore next */
      (cov_jcnotovwt().b[11][1]++, `Imported Prompt ${index + 1}`));
      const content =
      /* istanbul ignore next */
      (cov_jcnotovwt().s[52]++,
      /* istanbul ignore next */
      (cov_jcnotovwt().b[12][0]++, lines.slice(1).join("\n").trim()) ||
      /* istanbul ignore next */
      (cov_jcnotovwt().b[12][1]++, lines[0]));
      /* istanbul ignore next */
      cov_jcnotovwt().s[53]++;
      if (content) {
        /* istanbul ignore next */
        cov_jcnotovwt().b[13][0]++;
        cov_jcnotovwt().s[54]++;
        prompts.push({
          title,
          content,
          description: `Imported from text file`,
          source: "Text File",
          variables: extractVariables(content)
        });
      } else
      /* istanbul ignore next */
      {
        cov_jcnotovwt().b[13][1]++;
      }
    });
    /* istanbul ignore next */
    cov_jcnotovwt().s[55]++;
    return prompts;
  };
  /* istanbul ignore next */
  cov_jcnotovwt().s[56]++;
  const parseTextInput = text => {
    /* istanbul ignore next */
    cov_jcnotovwt().f[8]++;
    const prompts =
    /* istanbul ignore next */
    (cov_jcnotovwt().s[57]++, []);
    // Try to split by common separators
    const sections =
    /* istanbul ignore next */
    (cov_jcnotovwt().s[58]++, text.split(/\n---+\n|\n===+\n|\n\n\n+/));
    /* istanbul ignore next */
    cov_jcnotovwt().s[59]++;
    sections.forEach((section, index) => {
      /* istanbul ignore next */
      cov_jcnotovwt().f[9]++;
      const content =
      /* istanbul ignore next */
      (cov_jcnotovwt().s[60]++, section.trim());
      /* istanbul ignore next */
      cov_jcnotovwt().s[61]++;
      if (!content) {
        /* istanbul ignore next */
        cov_jcnotovwt().b[14][0]++;
        cov_jcnotovwt().s[62]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_jcnotovwt().b[14][1]++;
      }
      // Try to extract title from first line if it looks like a header
      const lines =
      /* istanbul ignore next */
      (cov_jcnotovwt().s[63]++, content.split("\n"));
      let title =
      /* istanbul ignore next */
      (cov_jcnotovwt().s[64]++, `Imported Prompt ${index + 1}`);
      let promptContent =
      /* istanbul ignore next */
      (cov_jcnotovwt().s[65]++, content);
      /* istanbul ignore next */
      cov_jcnotovwt().s[66]++;
      if (
      /* istanbul ignore next */
      (cov_jcnotovwt().b[16][0]++, lines[0].length < 100) &&
      /* istanbul ignore next */
      (cov_jcnotovwt().b[16][1]++, lines.length > 1)) {
        /* istanbul ignore next */
        cov_jcnotovwt().b[15][0]++;
        cov_jcnotovwt().s[67]++;
        title = lines[0].replace(/^#+\s*/, "").trim();
        /* istanbul ignore next */
        cov_jcnotovwt().s[68]++;
        promptContent = lines.slice(1).join("\n").trim();
      } else
      /* istanbul ignore next */
      {
        cov_jcnotovwt().b[15][1]++;
      }
      cov_jcnotovwt().s[69]++;
      prompts.push({
        title,
        content: promptContent,
        description: "Imported from manual input",
        source: "Manual Input",
        variables: extractVariables(promptContent)
      });
    });
    /* istanbul ignore next */
    cov_jcnotovwt().s[70]++;
    return prompts;
  };
  /* istanbul ignore next */
  cov_jcnotovwt().s[71]++;
  const extractVariables = content => {
    /* istanbul ignore next */
    cov_jcnotovwt().f[10]++;
    const variables =
    /* istanbul ignore next */
    (cov_jcnotovwt().s[72]++, {});
    // Look for {{variable}} patterns
    const matches =
    /* istanbul ignore next */
    (cov_jcnotovwt().s[73]++, content.match(/\{\{([^}]+)\}\}/g));
    /* istanbul ignore next */
    cov_jcnotovwt().s[74]++;
    if (matches) {
      /* istanbul ignore next */
      cov_jcnotovwt().b[17][0]++;
      cov_jcnotovwt().s[75]++;
      matches.forEach(match => {
        /* istanbul ignore next */
        cov_jcnotovwt().f[11]++;
        const varName =
        /* istanbul ignore next */
        (cov_jcnotovwt().s[76]++, match.replace(/\{\{|\}\}/g, "").trim());
        /* istanbul ignore next */
        cov_jcnotovwt().s[77]++;
        variables[varName] = {
          type: "string",
          label: varName.replace(/_/g, " ").replace(/\b\w/g, l => {
            /* istanbul ignore next */
            cov_jcnotovwt().f[12]++;
            cov_jcnotovwt().s[78]++;
            return l.toUpperCase();
          }),
          description: `Variable extracted from prompt`
        };
      });
    } else
    /* istanbul ignore next */
    {
      cov_jcnotovwt().b[17][1]++;
    }
    cov_jcnotovwt().s[79]++;
    return variables;
  };
  /* istanbul ignore next */
  cov_jcnotovwt().s[80]++;
  const handleImport = () => {
    /* istanbul ignore next */
    cov_jcnotovwt().f[13]++;
    cov_jcnotovwt().s[81]++;
    if (previewPrompts.length > 0) {
      /* istanbul ignore next */
      cov_jcnotovwt().b[18][0]++;
      cov_jcnotovwt().s[82]++;
      onImport(previewPrompts);
      /* istanbul ignore next */
      cov_jcnotovwt().s[83]++;
      onClose();
      /* istanbul ignore next */
      cov_jcnotovwt().s[84]++;
      setPreviewPrompts([]);
      /* istanbul ignore next */
      cov_jcnotovwt().s[85]++;
      setTextInput("");
    } else
    /* istanbul ignore next */
    {
      cov_jcnotovwt().b[18][1]++;
    }
  };
  /* istanbul ignore next */
  cov_jcnotovwt().s[86]++;
  const handleClose = () => {
    /* istanbul ignore next */
    cov_jcnotovwt().f[14]++;
    cov_jcnotovwt().s[87]++;
    setPreviewPrompts([]);
    /* istanbul ignore next */
    cov_jcnotovwt().s[88]++;
    setTextInput("");
    /* istanbul ignore next */
    cov_jcnotovwt().s[89]++;
    onClose();
  };
  /* istanbul ignore next */
  cov_jcnotovwt().s[90]++;
  return _jsx(Transition, {
    appear: true,
    show: isOpen,
    as: Fragment,
    children: _jsxs(Dialog, {
      as: "div",
      className: "relative z-50",
      onClose: handleClose,
      children: [_jsx(Transition.Child, {
        as: Fragment,
        enter: "ease-out duration-300",
        enterFrom: "opacity-0",
        enterTo: "opacity-100",
        leave: "ease-in duration-200",
        leaveFrom: "opacity-100",
        leaveTo: "opacity-0",
        children: _jsx("div", {
          className: "fixed inset-0 bg-black bg-opacity-25"
        })
      }), _jsx("div", {
        className: "fixed inset-0 overflow-y-auto",
        children: _jsx("div", {
          className: "flex min-h-full items-center justify-center p-4 text-center",
          children: _jsx(Transition.Child, {
            as: Fragment,
            enter: "ease-out duration-300",
            enterFrom: "opacity-0 scale-95",
            enterTo: "opacity-100 scale-100",
            leave: "ease-in duration-200",
            leaveFrom: "opacity-100 scale-100",
            leaveTo: "opacity-0 scale-95",
            children: _jsxs(Dialog.Panel, {
              className: "w-full max-w-4xl transform overflow-hidden rounded-2xl bg-white p-6 text-left align-middle shadow-xl transition-all",
              children: [_jsxs("div", {
                className: "flex items-center justify-between mb-6",
                children: [_jsx(Dialog.Title, {
                  as: "h3",
                  className: "text-lg font-medium leading-6 text-gray-900",
                  children: "Import Prompts"
                }), _jsx("button", {
                  onClick: handleClose,
                  className: "rounded-md bg-white text-gray-400 hover:text-gray-500 focus:outline-none focus:ring-2 focus:ring-indigo-500",
                  children: _jsx(XMarkIcon, {
                    className: "h-6 w-6"
                  })
                })]
              }), previewPrompts.length === 0 ?
              /* istanbul ignore next */
              (cov_jcnotovwt().b[19][0]++, _jsxs("div", {
                children: [_jsxs("div", {
                  className: "mb-6",
                  children: [_jsx("h4", {
                    className: "text-sm font-medium text-gray-900 mb-3",
                    children: "Choose import method:"
                  }), _jsxs("div", {
                    className: "grid grid-cols-2 gap-3",
                    children: [_jsxs("button", {
                      onClick: () => {
                        /* istanbul ignore next */
                        cov_jcnotovwt().f[15]++;
                        cov_jcnotovwt().s[91]++;
                        return setImportMethod("text");
                      },
                      className: `p-4 border-2 rounded-lg text-left ${importMethod === "text" ?
                      /* istanbul ignore next */
                      (cov_jcnotovwt().b[20][0]++, "border-indigo-500 bg-indigo-50") :
                      /* istanbul ignore next */
                      (cov_jcnotovwt().b[20][1]++, "border-gray-200 hover:border-gray-300")}`,
                      children: [_jsx(ClipboardDocumentIcon, {
                        className: "h-6 w-6 text-gray-600 mb-2"
                      }), _jsx("div", {
                        className: "font-medium",
                        children: "Paste Text"
                      }), _jsx("div", {
                        className: "text-sm text-gray-500",
                        children: "Copy and paste your prompts"
                      })]
                    }), _jsxs("button", {
                      onClick: () => {
                        /* istanbul ignore next */
                        cov_jcnotovwt().f[16]++;
                        cov_jcnotovwt().s[92]++;
                        return setImportMethod("file");
                      },
                      className: `p-4 border-2 rounded-lg text-left ${importMethod === "file" ?
                      /* istanbul ignore next */
                      (cov_jcnotovwt().b[21][0]++, "border-indigo-500 bg-indigo-50") :
                      /* istanbul ignore next */
                      (cov_jcnotovwt().b[21][1]++, "border-gray-200 hover:border-gray-300")}`,
                      children: [_jsx(DocumentArrowUpIcon, {
                        className: "h-6 w-6 text-gray-600 mb-2"
                      }), _jsx("div", {
                        className: "font-medium",
                        children: "Upload File"
                      }), _jsx("div", {
                        className: "text-sm text-gray-500",
                        children: "JSON, TXT, or MD files"
                      })]
                    }), _jsxs("button", {
                      onClick: () => {
                        /* istanbul ignore next */
                        cov_jcnotovwt().f[17]++;
                        cov_jcnotovwt().s[93]++;
                        return setImportMethod("chatgpt");
                      },
                      className: `p-4 border-2 rounded-lg text-left ${importMethod === "chatgpt" ?
                      /* istanbul ignore next */
                      (cov_jcnotovwt().b[22][0]++, "border-indigo-500 bg-indigo-50") :
                      /* istanbul ignore next */
                      (cov_jcnotovwt().b[22][1]++, "border-gray-200 hover:border-gray-300")}`,
                      children: [_jsx(ChatBubbleLeftRightIcon, {
                        className: "h-6 w-6 text-gray-600 mb-2"
                      }), _jsx("div", {
                        className: "font-medium",
                        children: "ChatGPT Export"
                      }), _jsx("div", {
                        className: "text-sm text-gray-500",
                        children: "Import from ChatGPT conversations"
                      })]
                    }), _jsxs("button", {
                      onClick: () => {
                        /* istanbul ignore next */
                        cov_jcnotovwt().f[18]++;
                        cov_jcnotovwt().s[94]++;
                        return setImportMethod("gemini");
                      },
                      className: `p-4 border-2 rounded-lg text-left ${importMethod === "gemini" ?
                      /* istanbul ignore next */
                      (cov_jcnotovwt().b[23][0]++, "border-indigo-500 bg-indigo-50") :
                      /* istanbul ignore next */
                      (cov_jcnotovwt().b[23][1]++, "border-gray-200 hover:border-gray-300")}`,
                      children: [_jsx(CodeBracketIcon, {
                        className: "h-6 w-6 text-gray-600 mb-2"
                      }), _jsx("div", {
                        className: "font-medium",
                        children: "Gemini Export"
                      }), _jsx("div", {
                        className: "text-sm text-gray-500",
                        children: "Import from Google Gemini"
                      })]
                    })]
                  })]
                }), _jsxs("div", {
                  className: "space-y-4",
                  children: [
                  /* istanbul ignore next */
                  (cov_jcnotovwt().b[24][0]++, importMethod === "text") &&
                  /* istanbul ignore next */
                  (cov_jcnotovwt().b[24][1]++, _jsxs("div", {
                    children: [_jsx("label", {
                      className: "block text-sm font-medium text-gray-700 mb-2",
                      children: "Paste your prompts here:"
                    }), _jsx("textarea", {
                      value: textInput,
                      onChange: e => {
                        /* istanbul ignore next */
                        cov_jcnotovwt().f[19]++;
                        cov_jcnotovwt().s[95]++;
                        return setTextInput(e.target.value);
                      },
                      rows: 10,
                      className: "block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500",
                      placeholder: "Paste multiple prompts separated by --- or empty lines..."
                    }), _jsx("p", {
                      className: "mt-2 text-sm text-gray-500",
                      children: "Separate multiple prompts with \"---\" or double line breaks"
                    })]
                  })),
                  /* istanbul ignore next */
                  (cov_jcnotovwt().b[25][0]++, importMethod === "file") &&
                  /* istanbul ignore next */
                  (cov_jcnotovwt().b[25][1]++, _jsxs("div", {
                    children: [_jsx("label", {
                      className: "block text-sm font-medium text-gray-700 mb-2",
                      children: "Choose file to upload:"
                    }), _jsx("input", {
                      type: "file",
                      accept: ".json,.txt,.md",
                      onChange: handleFileUpload,
                      className: "block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-indigo-50 file:text-indigo-700 hover:file:bg-indigo-100"
                    }), _jsx("p", {
                      className: "mt-2 text-sm text-gray-500",
                      children: "Supported formats: JSON (ChatGPT export), TXT, MD"
                    })]
                  })), (
                  /* istanbul ignore next */
                  (cov_jcnotovwt().b[26][0]++, importMethod === "chatgpt") ||
                  /* istanbul ignore next */
                  (cov_jcnotovwt().b[26][1]++, importMethod === "gemini")) &&
                  /* istanbul ignore next */
                  (cov_jcnotovwt().b[26][2]++, _jsxs("div", {
                    className: "bg-blue-50 border border-blue-200 rounded-lg p-4",
                    children: [_jsx("h5", {
                      className: "font-medium text-blue-900 mb-2",
                      children: importMethod === "chatgpt" ?
                      /* istanbul ignore next */
                      (cov_jcnotovwt().b[27][0]++, "ChatGPT Export Instructions:") :
                      /* istanbul ignore next */
                      (cov_jcnotovwt().b[27][1]++, "Gemini Export Instructions:")
                    }), _jsx("ol", {
                      className: "text-sm text-blue-800 space-y-1 list-decimal list-inside",
                      children: importMethod === "chatgpt" ?
                      /* istanbul ignore next */
                      (cov_jcnotovwt().b[28][0]++, _jsxs(_Fragment, {
                        children: [_jsx("li", {
                          children: "Go to ChatGPT Settings \u2192 Data Controls"
                        }), _jsx("li", {
                          children: "Click \"Export data\" and download your conversations"
                        }), _jsx("li", {
                          children: "Upload the conversations.json file here"
                        })]
                      })) :
                      /* istanbul ignore next */
                      (cov_jcnotovwt().b[28][1]++, _jsxs(_Fragment, {
                        children: [_jsx("li", {
                          children: "Go to Gemini activity page"
                        }), _jsx("li", {
                          children: "Export your conversation history"
                        }), _jsx("li", {
                          children: "Upload the exported file here"
                        })]
                      }))
                    })]
                  }))]
                }), _jsxs("div", {
                  className: "flex justify-end space-x-3 mt-6",
                  children: [_jsx("button", {
                    onClick: handleClose,
                    className: "px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50",
                    children: "Cancel"
                  }), _jsx("button", {
                    onClick: importMethod === "text" ?
                    /* istanbul ignore next */
                    (cov_jcnotovwt().b[29][0]++, handleTextImport) :
                    /* istanbul ignore next */
                    (cov_jcnotovwt().b[29][1]++, undefined),
                    disabled:
                    /* istanbul ignore next */
                    (cov_jcnotovwt().b[30][0]++, isProcessing) ||
                    /* istanbul ignore next */
                    (cov_jcnotovwt().b[30][1]++, importMethod === "text") &&
                    /* istanbul ignore next */
                    (cov_jcnotovwt().b[30][2]++, !textInput.trim()),
                    className: "px-4 py-2 text-sm font-medium text-white bg-indigo-600 border border-transparent rounded-md hover:bg-indigo-700 disabled:opacity-50",
                    children: isProcessing ?
                    /* istanbul ignore next */
                    (cov_jcnotovwt().b[31][0]++, "Processing...") :
                    /* istanbul ignore next */
                    (cov_jcnotovwt().b[31][1]++, "Preview Import")
                  })]
                })]
              })) :
              /* istanbul ignore next */
              (/* Preview Screen */cov_jcnotovwt().b[19][1]++, _jsxs("div", {
                children: [_jsxs("div", {
                  className: "mb-4",
                  children: [_jsx("h4", {
                    className: "text-lg font-medium text-gray-900",
                    children: "Import Preview"
                  }), _jsxs("p", {
                    className: "text-sm text-gray-600",
                    children: ["Found ", previewPrompts.length, " prompt", previewPrompts.length !== 1 ?
                    /* istanbul ignore next */
                    (cov_jcnotovwt().b[32][0]++, "s") :
                    /* istanbul ignore next */
                    (cov_jcnotovwt().b[32][1]++, ""), " to import"]
                  })]
                }), _jsx("div", {
                  className: "max-h-96 overflow-y-auto space-y-4 mb-6",
                  children: previewPrompts.map((prompt, index) => {
                    /* istanbul ignore next */
                    cov_jcnotovwt().f[20]++;
                    cov_jcnotovwt().s[96]++;
                    return _jsxs("div", {
                      className: "border border-gray-200 rounded-lg p-4",
                      children: [_jsxs("div", {
                        className: "flex items-start justify-between mb-2",
                        children: [_jsx("h5", {
                          className: "font-medium text-gray-900",
                          children: prompt.title
                        }), _jsx("span", {
                          className: "text-xs bg-gray-100 text-gray-600 px-2 py-1 rounded",
                          children: prompt.source
                        })]
                      }), _jsx("p", {
                        className: "text-sm text-gray-600 mb-2",
                        children: prompt.description
                      }), _jsx("div", {
                        className: "bg-gray-50 rounded p-3 text-sm",
                        children: _jsx("p", {
                          className: "line-clamp-3",
                          children: prompt.content
                        })
                      }),
                      /* istanbul ignore next */
                      (cov_jcnotovwt().b[33][0]++, Object.keys(
                      /* istanbul ignore next */
                      (cov_jcnotovwt().b[34][0]++, prompt.variables) ||
                      /* istanbul ignore next */
                      (cov_jcnotovwt().b[34][1]++, {})).length > 0) &&
                      /* istanbul ignore next */
                      (cov_jcnotovwt().b[33][1]++, _jsx("div", {
                        className: "mt-2",
                        children: _jsxs("span", {
                          className: "text-xs text-gray-500",
                          children: ["Variables:", " ", Object.keys(
                          /* istanbul ignore next */
                          (cov_jcnotovwt().b[35][0]++, prompt.variables) ||
                          /* istanbul ignore next */
                          (cov_jcnotovwt().b[35][1]++, {})).join(", ")]
                        })
                      }))]
                    }, index);
                  })
                }), _jsxs("div", {
                  className: "flex justify-end space-x-3",
                  children: [_jsx("button", {
                    onClick: () => {
                      /* istanbul ignore next */
                      cov_jcnotovwt().f[21]++;
                      cov_jcnotovwt().s[97]++;
                      return setPreviewPrompts([]);
                    },
                    className: "px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50",
                    children: "Back"
                  }), _jsxs("button", {
                    onClick: handleImport,
                    className: "px-4 py-2 text-sm font-medium text-white bg-green-600 border border-transparent rounded-md hover:bg-green-700",
                    children: ["Import ", previewPrompts.length, " Prompt", previewPrompts.length !== 1 ?
                    /* istanbul ignore next */
                    (cov_jcnotovwt().b[36][0]++, "s") :
                    /* istanbul ignore next */
                    (cov_jcnotovwt().b[36][1]++, "")]
                  })]
                })]
              }))]
            })
          })
        })
      })]
    })
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,