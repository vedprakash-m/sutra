75170f2b6f4f522039c7e176582dff8a
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
require("@testing-library/jest-dom");
// Mock environment variables for Jest tests
process.env.VITE_API_URL = "http://localhost:7071/api";
process.env.VITE_AUTH_DOMAIN = "test-domain";
process.env.VITE_AUTH_CLIENT_ID = "test-client-id";
process.env.NODE_ENV = "test";
// Mock Vite's import.meta for Jest tests
Object.defineProperty(globalThis, "import", {
    value: {
        meta: {
            env: {
                VITE_API_URL: "http://localhost:7071/api",
                VITE_AUTH_DOMAIN: "test-domain",
                VITE_AUTH_CLIENT_ID: "test-client-id",
                MODE: "test",
                DEV: false,
                PROD: false,
            },
        },
    },
});
// Mock window.matchMedia for responsive components
Object.defineProperty(window, "matchMedia", {
    writable: true,
    value: (query) => ({
        matches: false,
        media: query,
        onchange: null,
        addListener: () => { }, // deprecated
        removeListener: () => { }, // deprecated
        addEventListener: () => { },
        removeEventListener: () => { },
        dispatchEvent: () => false,
    }),
});
// Mock IntersectionObserver
const mockIntersectionObserver = jest.fn();
mockIntersectionObserver.mockReturnValue({
    observe: () => null,
    unobserve: () => null,
    disconnect: () => null,
});
window.IntersectionObserver = mockIntersectionObserver;
window.IntersectionObserver.prototype.disconnect = jest.fn();
window.IntersectionObserver.prototype.observe = jest.fn();
window.IntersectionObserver.prototype.unobserve = jest.fn();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL3ZlZHByYWthc2htaXNocmEvc3V0cmEvc3JjL3Rlc3Qtc2V0dXAudHMiLCJtYXBwaW5ncyI6Ijs7QUFBQSxxQ0FBbUM7QUFFbkMsNENBQTRDO0FBQzVDLE9BQU8sQ0FBQyxHQUFHLENBQUMsWUFBWSxHQUFHLDJCQUEyQixDQUFDO0FBQ3ZELE9BQU8sQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLEdBQUcsYUFBYSxDQUFDO0FBQzdDLE9BQU8sQ0FBQyxHQUFHLENBQUMsbUJBQW1CLEdBQUcsZ0JBQWdCLENBQUM7QUFDbkQsT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRLEdBQUcsTUFBTSxDQUFDO0FBRTlCLHlDQUF5QztBQUN6QyxNQUFNLENBQUMsY0FBYyxDQUFDLFVBQVUsRUFBRSxRQUFRLEVBQUU7SUFDMUMsS0FBSyxFQUFFO1FBQ0wsSUFBSSxFQUFFO1lBQ0osR0FBRyxFQUFFO2dCQUNILFlBQVksRUFBRSwyQkFBMkI7Z0JBQ3pDLGdCQUFnQixFQUFFLGFBQWE7Z0JBQy9CLG1CQUFtQixFQUFFLGdCQUFnQjtnQkFDckMsSUFBSSxFQUFFLE1BQU07Z0JBQ1osR0FBRyxFQUFFLEtBQUs7Z0JBQ1YsSUFBSSxFQUFFLEtBQUs7YUFDWjtTQUNGO0tBQ0Y7Q0FDRixDQUFDLENBQUM7QUFFSCxtREFBbUQ7QUFDbkQsTUFBTSxDQUFDLGNBQWMsQ0FBQyxNQUFNLEVBQUUsWUFBWSxFQUFFO0lBQzFDLFFBQVEsRUFBRSxJQUFJO0lBQ2QsS0FBSyxFQUFFLENBQUMsS0FBYSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQ3pCLE9BQU8sRUFBRSxLQUFLO1FBQ2QsS0FBSyxFQUFFLEtBQUs7UUFDWixRQUFRLEVBQUUsSUFBSTtRQUNkLFdBQVcsRUFBRSxHQUFHLEVBQUUsR0FBRSxDQUFDLEVBQUUsYUFBYTtRQUNwQyxjQUFjLEVBQUUsR0FBRyxFQUFFLEdBQUUsQ0FBQyxFQUFFLGFBQWE7UUFDdkMsZ0JBQWdCLEVBQUUsR0FBRyxFQUFFLEdBQUUsQ0FBQztRQUMxQixtQkFBbUIsRUFBRSxHQUFHLEVBQUUsR0FBRSxDQUFDO1FBQzdCLGFBQWEsRUFBRSxHQUFHLEVBQUUsQ0FBQyxLQUFLO0tBQzNCLENBQUM7Q0FDSCxDQUFDLENBQUM7QUFFSCw0QkFBNEI7QUFDNUIsTUFBTSx3QkFBd0IsR0FBRyxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUM7QUFDM0Msd0JBQXdCLENBQUMsZUFBZSxDQUFDO0lBQ3ZDLE9BQU8sRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJO0lBQ25CLFNBQVMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJO0lBQ3JCLFVBQVUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJO0NBQ3ZCLENBQUMsQ0FBQztBQUNILE1BQU0sQ0FBQyxvQkFBb0IsR0FBRyx3QkFBd0IsQ0FBQztBQUN2RCxNQUFNLENBQUMsb0JBQW9CLENBQUMsU0FBUyxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUM7QUFDN0QsTUFBTSxDQUFDLG9CQUFvQixDQUFDLFNBQVMsQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDO0FBQzFELE1BQU0sQ0FBQyxvQkFBb0IsQ0FBQyxTQUFTLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMvdmVkcHJha2FzaG1pc2hyYS9zdXRyYS9zcmMvdGVzdC1zZXR1cC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgXCJAdGVzdGluZy1saWJyYXJ5L2plc3QtZG9tXCI7XG5cbi8vIE1vY2sgZW52aXJvbm1lbnQgdmFyaWFibGVzIGZvciBKZXN0IHRlc3RzXG5wcm9jZXNzLmVudi5WSVRFX0FQSV9VUkwgPSBcImh0dHA6Ly9sb2NhbGhvc3Q6NzA3MS9hcGlcIjtcbnByb2Nlc3MuZW52LlZJVEVfQVVUSF9ET01BSU4gPSBcInRlc3QtZG9tYWluXCI7XG5wcm9jZXNzLmVudi5WSVRFX0FVVEhfQ0xJRU5UX0lEID0gXCJ0ZXN0LWNsaWVudC1pZFwiO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgPSBcInRlc3RcIjtcblxuLy8gTW9jayBWaXRlJ3MgaW1wb3J0Lm1ldGEgZm9yIEplc3QgdGVzdHNcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShnbG9iYWxUaGlzLCBcImltcG9ydFwiLCB7XG4gIHZhbHVlOiB7XG4gICAgbWV0YToge1xuICAgICAgZW52OiB7XG4gICAgICAgIFZJVEVfQVBJX1VSTDogXCJodHRwOi8vbG9jYWxob3N0OjcwNzEvYXBpXCIsXG4gICAgICAgIFZJVEVfQVVUSF9ET01BSU46IFwidGVzdC1kb21haW5cIixcbiAgICAgICAgVklURV9BVVRIX0NMSUVOVF9JRDogXCJ0ZXN0LWNsaWVudC1pZFwiLFxuICAgICAgICBNT0RFOiBcInRlc3RcIixcbiAgICAgICAgREVWOiBmYWxzZSxcbiAgICAgICAgUFJPRDogZmFsc2UsXG4gICAgICB9LFxuICAgIH0sXG4gIH0sXG59KTtcblxuLy8gTW9jayB3aW5kb3cubWF0Y2hNZWRpYSBmb3IgcmVzcG9uc2l2ZSBjb21wb25lbnRzXG5PYmplY3QuZGVmaW5lUHJvcGVydHkod2luZG93LCBcIm1hdGNoTWVkaWFcIiwge1xuICB3cml0YWJsZTogdHJ1ZSxcbiAgdmFsdWU6IChxdWVyeTogc3RyaW5nKSA9PiAoe1xuICAgIG1hdGNoZXM6IGZhbHNlLFxuICAgIG1lZGlhOiBxdWVyeSxcbiAgICBvbmNoYW5nZTogbnVsbCxcbiAgICBhZGRMaXN0ZW5lcjogKCkgPT4ge30sIC8vIGRlcHJlY2F0ZWRcbiAgICByZW1vdmVMaXN0ZW5lcjogKCkgPT4ge30sIC8vIGRlcHJlY2F0ZWRcbiAgICBhZGRFdmVudExpc3RlbmVyOiAoKSA9PiB7fSxcbiAgICByZW1vdmVFdmVudExpc3RlbmVyOiAoKSA9PiB7fSxcbiAgICBkaXNwYXRjaEV2ZW50OiAoKSA9PiBmYWxzZSxcbiAgfSksXG59KTtcblxuLy8gTW9jayBJbnRlcnNlY3Rpb25PYnNlcnZlclxuY29uc3QgbW9ja0ludGVyc2VjdGlvbk9ic2VydmVyID0gamVzdC5mbigpO1xubW9ja0ludGVyc2VjdGlvbk9ic2VydmVyLm1vY2tSZXR1cm5WYWx1ZSh7XG4gIG9ic2VydmU6ICgpID0+IG51bGwsXG4gIHVub2JzZXJ2ZTogKCkgPT4gbnVsbCxcbiAgZGlzY29ubmVjdDogKCkgPT4gbnVsbCxcbn0pO1xud2luZG93LkludGVyc2VjdGlvbk9ic2VydmVyID0gbW9ja0ludGVyc2VjdGlvbk9ic2VydmVyO1xud2luZG93LkludGVyc2VjdGlvbk9ic2VydmVyLnByb3RvdHlwZS5kaXNjb25uZWN0ID0gamVzdC5mbigpO1xud2luZG93LkludGVyc2VjdGlvbk9ic2VydmVyLnByb3RvdHlwZS5vYnNlcnZlID0gamVzdC5mbigpO1xud2luZG93LkludGVyc2VjdGlvbk9ic2VydmVyLnByb3RvdHlwZS51bm9ic2VydmUgPSBqZXN0LmZuKCk7XG4iXSwidmVyc2lvbiI6M30=