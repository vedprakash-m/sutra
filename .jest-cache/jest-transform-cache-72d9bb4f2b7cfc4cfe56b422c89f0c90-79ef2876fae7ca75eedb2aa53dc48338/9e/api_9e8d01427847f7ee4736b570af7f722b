84c31689e0a1c3292e0a00b52a07e727
"use strict";
// Mock for src/services/api.ts
/* eslint-disable @typescript-eslint/no-unused-vars */
// @ts-nocheck
Object.defineProperty(exports, "__esModule", { value: true });
exports.llmApi = exports.adminApi = exports.integrationsApi = exports.playbooksApi = exports.collectionsApi = exports.apiService = void 0;
// Mock implementation
exports.apiService = {
    async get(endpoint) {
        return {
            data: [],
            total: 0,
            page: 1,
            limit: 10,
            hasNext: false,
        };
    },
    async post(endpoint, data) {
        return {};
    },
    async put(endpoint, data) {
        return {};
    },
    async delete(endpoint) {
        return {};
    },
};
exports.collectionsApi = {
    list: (params) => Promise.resolve({ data: [], total: 0, page: 1, limit: 10, hasNext: false }),
    get: (id) => Promise.resolve({}),
    create: (collection) => Promise.resolve({}),
    update: (id, collection) => Promise.resolve({}),
    delete: (id) => Promise.resolve(),
};
exports.playbooksApi = {
    list: (params) => Promise.resolve({ data: [], total: 0, page: 1, limit: 10, hasNext: false }),
    get: (id) => Promise.resolve({}),
    create: (playbook) => Promise.resolve({}),
    update: (id, playbook) => Promise.resolve({}),
    delete: (id) => Promise.resolve(),
};
exports.integrationsApi = {
    list: () => Promise.resolve({ data: [], total: 0, page: 1, limit: 10, hasNext: false }),
    get: (id) => Promise.resolve({}),
    create: (integration) => Promise.resolve({}),
    update: (id, integration) => Promise.resolve({}),
    delete: (id) => Promise.resolve(),
};
exports.adminApi = {
    getStats: () => Promise.resolve({}),
    getUsers: () => Promise.resolve({ data: [], total: 0, page: 1, limit: 10, hasNext: false }),
};
exports.llmApi = {
    execute: (data) => Promise.resolve({}),
};
exports.default = exports.apiService;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL3ZlZHByYWthc2htaXNocmEvc3V0cmEvc3JjL3NlcnZpY2VzL19fbW9ja3NfXy9hcGkudHMiLCJtYXBwaW5ncyI6IjtBQUFBLCtCQUErQjtBQUMvQixzREFBc0Q7QUFDdEQsY0FBYzs7O0FBcUVkLHNCQUFzQjtBQUNULFFBQUEsVUFBVSxHQUFHO0lBQ3hCLEtBQUssQ0FBQyxHQUFHLENBQUksUUFBZ0I7UUFDM0IsT0FBTztZQUNMLElBQUksRUFBRSxFQUFFO1lBQ1IsS0FBSyxFQUFFLENBQUM7WUFDUixJQUFJLEVBQUUsQ0FBQztZQUNQLEtBQUssRUFBRSxFQUFFO1lBQ1QsT0FBTyxFQUFFLEtBQUs7U0FDVixDQUFDO0lBQ1QsQ0FBQztJQUVELEtBQUssQ0FBQyxJQUFJLENBQUksUUFBZ0IsRUFBRSxJQUFVO1FBQ3hDLE9BQU8sRUFBTyxDQUFDO0lBQ2pCLENBQUM7SUFFRCxLQUFLLENBQUMsR0FBRyxDQUFJLFFBQWdCLEVBQUUsSUFBVTtRQUN2QyxPQUFPLEVBQU8sQ0FBQztJQUNqQixDQUFDO0lBRUQsS0FBSyxDQUFDLE1BQU0sQ0FBSSxRQUFnQjtRQUM5QixPQUFPLEVBQU8sQ0FBQztJQUNqQixDQUFDO0NBQ0YsQ0FBQztBQUVXLFFBQUEsY0FBYyxHQUFHO0lBQzVCLElBQUksRUFBRSxDQUFDLE1BQVksRUFBRSxFQUFFLENBQ3JCLE9BQU8sQ0FBQyxPQUFPLENBQUMsRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUUsSUFBSSxFQUFFLENBQUMsRUFBRSxLQUFLLEVBQUUsRUFBRSxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsQ0FBQztJQUM3RSxHQUFHLEVBQUUsQ0FBQyxFQUFVLEVBQUUsRUFBRSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsRUFBZ0IsQ0FBQztJQUN0RCxNQUFNLEVBQUUsQ0FBQyxVQUFlLEVBQUUsRUFBRSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsRUFBZ0IsQ0FBQztJQUM5RCxNQUFNLEVBQUUsQ0FBQyxFQUFVLEVBQUUsVUFBZSxFQUFFLEVBQUUsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEVBQWdCLENBQUM7SUFDMUUsTUFBTSxFQUFFLENBQUMsRUFBVSxFQUFFLEVBQUUsQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFO0NBQzFDLENBQUM7QUFFVyxRQUFBLFlBQVksR0FBRztJQUMxQixJQUFJLEVBQUUsQ0FBQyxNQUFZLEVBQUUsRUFBRSxDQUNyQixPQUFPLENBQUMsT0FBTyxDQUFDLEVBQUUsSUFBSSxFQUFFLEVBQUUsRUFBRSxLQUFLLEVBQUUsQ0FBQyxFQUFFLElBQUksRUFBRSxDQUFDLEVBQUUsS0FBSyxFQUFFLEVBQUUsRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLENBQUM7SUFDN0UsR0FBRyxFQUFFLENBQUMsRUFBVSxFQUFFLEVBQUUsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEVBQWMsQ0FBQztJQUNwRCxNQUFNLEVBQUUsQ0FBQyxRQUFhLEVBQUUsRUFBRSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsRUFBYyxDQUFDO0lBQzFELE1BQU0sRUFBRSxDQUFDLEVBQVUsRUFBRSxRQUFhLEVBQUUsRUFBRSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsRUFBYyxDQUFDO0lBQ3RFLE1BQU0sRUFBRSxDQUFDLEVBQVUsRUFBRSxFQUFFLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRTtDQUMxQyxDQUFDO0FBRVcsUUFBQSxlQUFlLEdBQUc7SUFDN0IsSUFBSSxFQUFFLEdBQUcsRUFBRSxDQUNULE9BQU8sQ0FBQyxPQUFPLENBQUMsRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUUsSUFBSSxFQUFFLENBQUMsRUFBRSxLQUFLLEVBQUUsRUFBRSxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsQ0FBQztJQUM3RSxHQUFHLEVBQUUsQ0FBQyxFQUFVLEVBQUUsRUFBRSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsRUFBb0IsQ0FBQztJQUMxRCxNQUFNLEVBQUUsQ0FBQyxXQUFnQixFQUFFLEVBQUUsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEVBQW9CLENBQUM7SUFDbkUsTUFBTSxFQUFFLENBQUMsRUFBVSxFQUFFLFdBQWdCLEVBQUUsRUFBRSxDQUN2QyxPQUFPLENBQUMsT0FBTyxDQUFDLEVBQW9CLENBQUM7SUFDdkMsTUFBTSxFQUFFLENBQUMsRUFBVSxFQUFFLEVBQUUsQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFO0NBQzFDLENBQUM7QUFFVyxRQUFBLFFBQVEsR0FBRztJQUN0QixRQUFRLEVBQUUsR0FBRyxFQUFFLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUM7SUFDbkMsUUFBUSxFQUFFLEdBQUcsRUFBRSxDQUNiLE9BQU8sQ0FBQyxPQUFPLENBQUMsRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUUsSUFBSSxFQUFFLENBQUMsRUFBRSxLQUFLLEVBQUUsRUFBRSxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsQ0FBQztDQUM5RSxDQUFDO0FBRVcsUUFBQSxNQUFNLEdBQUc7SUFDcEIsT0FBTyxFQUFFLENBQUMsSUFBUyxFQUFFLEVBQUUsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQztDQUM1QyxDQUFDO0FBRUYsa0JBQWUsa0JBQVUsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMvdmVkcHJha2FzaG1pc2hyYS9zdXRyYS9zcmMvc2VydmljZXMvX19tb2Nrc19fL2FwaS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBNb2NrIGZvciBzcmMvc2VydmljZXMvYXBpLnRzXG4vKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW51c2VkLXZhcnMgKi9cbi8vIEB0cy1ub2NoZWNrXG5cbmV4cG9ydCBpbnRlcmZhY2UgQXBpUmVzcG9uc2U8VCA9IGFueT4ge1xuICBkYXRhPzogVDtcbiAgZXJyb3I/OiBzdHJpbmc7XG4gIG1lc3NhZ2U/OiBzdHJpbmc7XG4gIHRpbWVzdGFtcD86IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBQYWdpbmF0ZWRSZXNwb25zZTxUPiB7XG4gIGRhdGE6IFRbXTtcbiAgdG90YWw6IG51bWJlcjtcbiAgcGFnZTogbnVtYmVyO1xuICBsaW1pdDogbnVtYmVyO1xuICBoYXNOZXh0OiBib29sZWFuO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIENvbGxlY3Rpb24ge1xuICBpZDogc3RyaW5nO1xuICBuYW1lOiBzdHJpbmc7XG4gIGRlc2NyaXB0aW9uOiBzdHJpbmc7XG4gIHR5cGU6IFwicHJpdmF0ZVwiIHwgXCJzaGFyZWRfdGVhbVwiIHwgXCJwdWJsaWNfbWFya2V0cGxhY2VcIjtcbiAgb3duZXJfaWQ6IHN0cmluZztcbiAgY3JlYXRlZF9hdDogc3RyaW5nO1xuICB1cGRhdGVkX2F0OiBzdHJpbmc7XG4gIHByb21wdF9jb3VudD86IG51bWJlcjtcbiAgdGFncz86IHN0cmluZ1tdO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFByb21wdCB7XG4gIGlkOiBzdHJpbmc7XG4gIHRpdGxlOiBzdHJpbmc7XG4gIGNvbnRlbnQ6IHN0cmluZztcbiAgY29sbGVjdGlvbl9pZDogc3RyaW5nO1xuICBjcmVhdGVkX2F0OiBzdHJpbmc7XG4gIHVwZGF0ZWRfYXQ6IHN0cmluZztcbiAgdmVyc2lvbjogbnVtYmVyO1xuICB0YWdzPzogc3RyaW5nW107XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUGxheWJvb2sge1xuICBpZDogc3RyaW5nO1xuICBuYW1lOiBzdHJpbmc7XG4gIGRlc2NyaXB0aW9uOiBzdHJpbmc7XG4gIHN0ZXBzOiBQbGF5Ym9va1N0ZXBbXTtcbiAgY3JlYXRvcl9pZDogc3RyaW5nO1xuICBjcmVhdGVkX2F0OiBzdHJpbmc7XG4gIHVwZGF0ZWRfYXQ6IHN0cmluZztcbiAgdmlzaWJpbGl0eTogXCJwcml2YXRlXCIgfCBcInNoYXJlZFwiO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFBsYXlib29rU3RlcCB7XG4gIGlkOiBzdHJpbmc7XG4gIHR5cGU6IFwicHJvbXB0XCIgfCBcInJldmlld1wiIHwgXCJ2YXJpYWJsZVwiO1xuICBwcm9tcHRfaWQ/OiBzdHJpbmc7XG4gIGNvbnRlbnQ/OiBzdHJpbmc7XG4gIHZhcmlhYmxlcz86IFJlY29yZDxzdHJpbmcsIGFueT47XG4gIG9yZGVyOiBudW1iZXI7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgTExNSW50ZWdyYXRpb24ge1xuICBpZDogc3RyaW5nO1xuICBwcm92aWRlcjogc3RyaW5nO1xuICBuYW1lOiBzdHJpbmc7XG4gIGFwaV9rZXk6IHN0cmluZztcbiAgZW5hYmxlZDogYm9vbGVhbjtcbiAgY29uZmlndXJhdGlvbjogUmVjb3JkPHN0cmluZywgYW55Pjtcbn1cblxuLy8gTW9jayBpbXBsZW1lbnRhdGlvblxuZXhwb3J0IGNvbnN0IGFwaVNlcnZpY2UgPSB7XG4gIGFzeW5jIGdldDxUPihlbmRwb2ludDogc3RyaW5nKTogUHJvbWlzZTxUPiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGRhdGE6IFtdLFxuICAgICAgdG90YWw6IDAsXG4gICAgICBwYWdlOiAxLFxuICAgICAgbGltaXQ6IDEwLFxuICAgICAgaGFzTmV4dDogZmFsc2UsXG4gICAgfSBhcyBUO1xuICB9LFxuXG4gIGFzeW5jIHBvc3Q8VD4oZW5kcG9pbnQ6IHN0cmluZywgZGF0YT86IGFueSk6IFByb21pc2U8VD4ge1xuICAgIHJldHVybiB7fSBhcyBUO1xuICB9LFxuXG4gIGFzeW5jIHB1dDxUPihlbmRwb2ludDogc3RyaW5nLCBkYXRhPzogYW55KTogUHJvbWlzZTxUPiB7XG4gICAgcmV0dXJuIHt9IGFzIFQ7XG4gIH0sXG5cbiAgYXN5bmMgZGVsZXRlPFQ+KGVuZHBvaW50OiBzdHJpbmcpOiBQcm9taXNlPFQ+IHtcbiAgICByZXR1cm4ge30gYXMgVDtcbiAgfSxcbn07XG5cbmV4cG9ydCBjb25zdCBjb2xsZWN0aW9uc0FwaSA9IHtcbiAgbGlzdDogKHBhcmFtcz86IGFueSkgPT5cbiAgICBQcm9taXNlLnJlc29sdmUoeyBkYXRhOiBbXSwgdG90YWw6IDAsIHBhZ2U6IDEsIGxpbWl0OiAxMCwgaGFzTmV4dDogZmFsc2UgfSksXG4gIGdldDogKGlkOiBzdHJpbmcpID0+IFByb21pc2UucmVzb2x2ZSh7fSBhcyBDb2xsZWN0aW9uKSxcbiAgY3JlYXRlOiAoY29sbGVjdGlvbjogYW55KSA9PiBQcm9taXNlLnJlc29sdmUoe30gYXMgQ29sbGVjdGlvbiksXG4gIHVwZGF0ZTogKGlkOiBzdHJpbmcsIGNvbGxlY3Rpb246IGFueSkgPT4gUHJvbWlzZS5yZXNvbHZlKHt9IGFzIENvbGxlY3Rpb24pLFxuICBkZWxldGU6IChpZDogc3RyaW5nKSA9PiBQcm9taXNlLnJlc29sdmUoKSxcbn07XG5cbmV4cG9ydCBjb25zdCBwbGF5Ym9va3NBcGkgPSB7XG4gIGxpc3Q6IChwYXJhbXM/OiBhbnkpID0+XG4gICAgUHJvbWlzZS5yZXNvbHZlKHsgZGF0YTogW10sIHRvdGFsOiAwLCBwYWdlOiAxLCBsaW1pdDogMTAsIGhhc05leHQ6IGZhbHNlIH0pLFxuICBnZXQ6IChpZDogc3RyaW5nKSA9PiBQcm9taXNlLnJlc29sdmUoe30gYXMgUGxheWJvb2spLFxuICBjcmVhdGU6IChwbGF5Ym9vazogYW55KSA9PiBQcm9taXNlLnJlc29sdmUoe30gYXMgUGxheWJvb2spLFxuICB1cGRhdGU6IChpZDogc3RyaW5nLCBwbGF5Ym9vazogYW55KSA9PiBQcm9taXNlLnJlc29sdmUoe30gYXMgUGxheWJvb2spLFxuICBkZWxldGU6IChpZDogc3RyaW5nKSA9PiBQcm9taXNlLnJlc29sdmUoKSxcbn07XG5cbmV4cG9ydCBjb25zdCBpbnRlZ3JhdGlvbnNBcGkgPSB7XG4gIGxpc3Q6ICgpID0+XG4gICAgUHJvbWlzZS5yZXNvbHZlKHsgZGF0YTogW10sIHRvdGFsOiAwLCBwYWdlOiAxLCBsaW1pdDogMTAsIGhhc05leHQ6IGZhbHNlIH0pLFxuICBnZXQ6IChpZDogc3RyaW5nKSA9PiBQcm9taXNlLnJlc29sdmUoe30gYXMgTExNSW50ZWdyYXRpb24pLFxuICBjcmVhdGU6IChpbnRlZ3JhdGlvbjogYW55KSA9PiBQcm9taXNlLnJlc29sdmUoe30gYXMgTExNSW50ZWdyYXRpb24pLFxuICB1cGRhdGU6IChpZDogc3RyaW5nLCBpbnRlZ3JhdGlvbjogYW55KSA9PlxuICAgIFByb21pc2UucmVzb2x2ZSh7fSBhcyBMTE1JbnRlZ3JhdGlvbiksXG4gIGRlbGV0ZTogKGlkOiBzdHJpbmcpID0+IFByb21pc2UucmVzb2x2ZSgpLFxufTtcblxuZXhwb3J0IGNvbnN0IGFkbWluQXBpID0ge1xuICBnZXRTdGF0czogKCkgPT4gUHJvbWlzZS5yZXNvbHZlKHt9KSxcbiAgZ2V0VXNlcnM6ICgpID0+XG4gICAgUHJvbWlzZS5yZXNvbHZlKHsgZGF0YTogW10sIHRvdGFsOiAwLCBwYWdlOiAxLCBsaW1pdDogMTAsIGhhc05leHQ6IGZhbHNlIH0pLFxufTtcblxuZXhwb3J0IGNvbnN0IGxsbUFwaSA9IHtcbiAgZXhlY3V0ZTogKGRhdGE6IGFueSkgPT4gUHJvbWlzZS5yZXNvbHZlKHt9KSxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGFwaVNlcnZpY2U7XG4iXSwidmVyc2lvbiI6M30=