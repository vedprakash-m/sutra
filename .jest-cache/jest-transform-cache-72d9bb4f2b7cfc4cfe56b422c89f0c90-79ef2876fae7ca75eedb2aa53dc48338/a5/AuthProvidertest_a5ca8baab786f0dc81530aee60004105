a4f1d5042dd7f1e89c7b598885e73ffd
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("@testing-library/react");
const AuthProvider_1 = require("../AuthProvider");
const react_router_dom_1 = require("react-router-dom");
const react_2 = require("react");
// Test component that uses the auth context
function TestComponent() {
    const { user, isAuthenticated, isAdmin, login, logout } = (0, AuthProvider_1.useAuth)();
    return ((0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)("div", { "data-testid": "auth-status", children: isAuthenticated ? "authenticated" : "not-authenticated" }), (0, jsx_runtime_1.jsx)("div", { "data-testid": "user-info", children: user ? `User: ${user.name}` : "No user" }), (0, jsx_runtime_1.jsx)("div", { "data-testid": "admin-status", children: isAdmin ? "admin" : "not-admin" }), (0, jsx_runtime_1.jsx)("button", { onClick: () => login("test@example.com"), children: "Login" }), (0, jsx_runtime_1.jsx)("button", { onClick: logout, children: "Logout" })] }));
}
describe("AuthProvider", () => {
    const renderWithAuth = () => {
        return (0, react_1.render)((0, jsx_runtime_1.jsx)(react_router_dom_1.BrowserRouter, { children: (0, jsx_runtime_1.jsx)(AuthProvider_1.AuthProvider, { children: (0, jsx_runtime_1.jsx)(TestComponent, {}) }) }));
    };
    it("should provide initial unauthenticated state", () => {
        renderWithAuth();
        expect(react_1.screen.getByTestId("auth-status")).toHaveTextContent("not-authenticated");
        expect(react_1.screen.getByTestId("user-info")).toHaveTextContent("No user");
        expect(react_1.screen.getByTestId("admin-status")).toHaveTextContent("not-admin");
    });
    it("should handle login", async () => {
        renderWithAuth();
        const loginButton = react_1.screen.getByText("Login");
        await (0, react_2.act)(async () => {
            loginButton.click();
        });
        // Wait for any async state updates to complete
        await (0, react_1.waitFor)(() => {
            expect(react_1.screen.getByTestId("auth-status")).toBeInTheDocument();
        });
    });
    it("should handle logout", async () => {
        renderWithAuth();
        const logoutButton = react_1.screen.getByText("Logout");
        await (0, react_2.act)(async () => {
            logoutButton.click();
        });
        // Wait for logout to complete and verify state
        await (0, react_1.waitFor)(() => {
            expect(react_1.screen.getByTestId("auth-status")).toHaveTextContent("not-authenticated");
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL3ZlZHByYWthc2htaXNocmEvc3V0cmEvc3JjL2NvbXBvbmVudHMvYXV0aC9fX3Rlc3RzX18vQXV0aFByb3ZpZGVyLnRlc3QudHN4IiwibWFwcGluZ3MiOiI7OztBQUFBLGtEQUFpRTtBQUNqRSxrREFBd0Q7QUFDeEQsdURBQWlEO0FBQ2pELGlDQUE0QjtBQUU1Qiw0Q0FBNEM7QUFDNUMsU0FBUyxhQUFhO0lBQ3BCLE1BQU0sRUFBRSxJQUFJLEVBQUUsZUFBZSxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLEdBQUcsSUFBQSxzQkFBTyxHQUFFLENBQUM7SUFFcEUsT0FBTyxDQUNMLDRDQUNFLCtDQUFpQixhQUFhLFlBQzNCLGVBQWUsQ0FBQyxDQUFDLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQyxtQkFBbUIsR0FDcEQsRUFDTiwrQ0FBaUIsV0FBVyxZQUN6QixJQUFJLENBQUMsQ0FBQyxDQUFDLFNBQVMsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyxTQUFTLEdBQ3BDLEVBQ04sK0NBQWlCLGNBQWMsWUFDNUIsT0FBTyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLFdBQVcsR0FDNUIsRUFDTixtQ0FBUSxPQUFPLEVBQUUsR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDLGtCQUFrQixDQUFDLHNCQUV2QyxFQUNULG1DQUFRLE9BQU8sRUFBRSxNQUFNLHVCQUFpQixJQUNwQyxDQUNQLENBQUM7QUFDSixDQUFDO0FBRUQsUUFBUSxDQUFDLGNBQWMsRUFBRSxHQUFHLEVBQUU7SUFDNUIsTUFBTSxjQUFjLEdBQUcsR0FBRyxFQUFFO1FBQzFCLE9BQU8sSUFBQSxjQUFNLEVBQ1gsdUJBQUMsZ0NBQWEsY0FDWix1QkFBQywyQkFBWSxjQUNYLHVCQUFDLGFBQWEsS0FBRyxHQUNKLEdBQ0QsQ0FDakIsQ0FBQztJQUNKLENBQUMsQ0FBQztJQUVGLEVBQUUsQ0FBQyw4Q0FBOEMsRUFBRSxHQUFHLEVBQUU7UUFDdEQsY0FBYyxFQUFFLENBQUM7UUFFakIsTUFBTSxDQUFDLGNBQU0sQ0FBQyxXQUFXLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxpQkFBaUIsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO1FBQ2pGLE1BQU0sQ0FBQyxjQUFNLENBQUMsV0FBVyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsaUJBQWlCLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDckUsTUFBTSxDQUFDLGNBQU0sQ0FBQyxXQUFXLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxpQkFBaUIsQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUM1RSxDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQyxxQkFBcUIsRUFBRSxLQUFLLElBQUksRUFBRTtRQUNuQyxjQUFjLEVBQUUsQ0FBQztRQUVqQixNQUFNLFdBQVcsR0FBRyxjQUFNLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBRTlDLE1BQU0sSUFBQSxXQUFHLEVBQUMsS0FBSyxJQUFJLEVBQUU7WUFDbkIsV0FBVyxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQ3RCLENBQUMsQ0FBQyxDQUFDO1FBRUgsK0NBQStDO1FBQy9DLE1BQU0sSUFBQSxlQUFPLEVBQUMsR0FBRyxFQUFFO1lBQ2pCLE1BQU0sQ0FBQyxjQUFNLENBQUMsV0FBVyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsaUJBQWlCLEVBQUUsQ0FBQztRQUNoRSxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLHNCQUFzQixFQUFFLEtBQUssSUFBSSxFQUFFO1FBQ3BDLGNBQWMsRUFBRSxDQUFDO1FBRWpCLE1BQU0sWUFBWSxHQUFHLGNBQU0sQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLENBQUM7UUFFaEQsTUFBTSxJQUFBLFdBQUcsRUFBQyxLQUFLLElBQUksRUFBRTtZQUNuQixZQUFZLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDdkIsQ0FBQyxDQUFDLENBQUM7UUFFSCwrQ0FBK0M7UUFDL0MsTUFBTSxJQUFBLGVBQU8sRUFBQyxHQUFHLEVBQUU7WUFDakIsTUFBTSxDQUFDLGNBQU0sQ0FBQyxXQUFXLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxpQkFBaUIsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO1FBQ25GLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMvdmVkcHJha2FzaG1pc2hyYS9zdXRyYS9zcmMvY29tcG9uZW50cy9hdXRoL19fdGVzdHNfXy9BdXRoUHJvdmlkZXIudGVzdC50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcmVuZGVyLCBzY3JlZW4sIHdhaXRGb3IgfSBmcm9tIFwiQHRlc3RpbmctbGlicmFyeS9yZWFjdFwiO1xuaW1wb3J0IHsgQXV0aFByb3ZpZGVyLCB1c2VBdXRoIH0gZnJvbSBcIi4uL0F1dGhQcm92aWRlclwiO1xuaW1wb3J0IHsgQnJvd3NlclJvdXRlciB9IGZyb20gXCJyZWFjdC1yb3V0ZXItZG9tXCI7XG5pbXBvcnQgeyBhY3QgfSBmcm9tIFwicmVhY3RcIjtcblxuLy8gVGVzdCBjb21wb25lbnQgdGhhdCB1c2VzIHRoZSBhdXRoIGNvbnRleHRcbmZ1bmN0aW9uIFRlc3RDb21wb25lbnQoKSB7XG4gIGNvbnN0IHsgdXNlciwgaXNBdXRoZW50aWNhdGVkLCBpc0FkbWluLCBsb2dpbiwgbG9nb3V0IH0gPSB1c2VBdXRoKCk7XG4gIFxuICByZXR1cm4gKFxuICAgIDxkaXY+XG4gICAgICA8ZGl2IGRhdGEtdGVzdGlkPVwiYXV0aC1zdGF0dXNcIj5cbiAgICAgICAge2lzQXV0aGVudGljYXRlZCA/IFwiYXV0aGVudGljYXRlZFwiIDogXCJub3QtYXV0aGVudGljYXRlZFwifVxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IGRhdGEtdGVzdGlkPVwidXNlci1pbmZvXCI+XG4gICAgICAgIHt1c2VyID8gYFVzZXI6ICR7dXNlci5uYW1lfWAgOiBcIk5vIHVzZXJcIn1cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBkYXRhLXRlc3RpZD1cImFkbWluLXN0YXR1c1wiPlxuICAgICAgICB7aXNBZG1pbiA/IFwiYWRtaW5cIiA6IFwibm90LWFkbWluXCJ9XG4gICAgICA8L2Rpdj5cbiAgICAgIDxidXR0b24gb25DbGljaz17KCkgPT4gbG9naW4oXCJ0ZXN0QGV4YW1wbGUuY29tXCIpfT5cbiAgICAgICAgTG9naW5cbiAgICAgIDwvYnV0dG9uPlxuICAgICAgPGJ1dHRvbiBvbkNsaWNrPXtsb2dvdXR9PkxvZ291dDwvYnV0dG9uPlxuICAgIDwvZGl2PlxuICApO1xufVxuXG5kZXNjcmliZShcIkF1dGhQcm92aWRlclwiLCAoKSA9PiB7XG4gIGNvbnN0IHJlbmRlcldpdGhBdXRoID0gKCkgPT4ge1xuICAgIHJldHVybiByZW5kZXIoXG4gICAgICA8QnJvd3NlclJvdXRlcj5cbiAgICAgICAgPEF1dGhQcm92aWRlcj5cbiAgICAgICAgICA8VGVzdENvbXBvbmVudCAvPlxuICAgICAgICA8L0F1dGhQcm92aWRlcj5cbiAgICAgIDwvQnJvd3NlclJvdXRlcj5cbiAgICApO1xuICB9O1xuXG4gIGl0KFwic2hvdWxkIHByb3ZpZGUgaW5pdGlhbCB1bmF1dGhlbnRpY2F0ZWQgc3RhdGVcIiwgKCkgPT4ge1xuICAgIHJlbmRlcldpdGhBdXRoKCk7XG4gICAgXG4gICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRlc3RJZChcImF1dGgtc3RhdHVzXCIpKS50b0hhdmVUZXh0Q29udGVudChcIm5vdC1hdXRoZW50aWNhdGVkXCIpO1xuICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXN0SWQoXCJ1c2VyLWluZm9cIikpLnRvSGF2ZVRleHRDb250ZW50KFwiTm8gdXNlclwiKTtcbiAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGVzdElkKFwiYWRtaW4tc3RhdHVzXCIpKS50b0hhdmVUZXh0Q29udGVudChcIm5vdC1hZG1pblwiKTtcbiAgfSk7XG5cbiAgaXQoXCJzaG91bGQgaGFuZGxlIGxvZ2luXCIsIGFzeW5jICgpID0+IHtcbiAgICByZW5kZXJXaXRoQXV0aCgpO1xuICAgIFxuICAgIGNvbnN0IGxvZ2luQnV0dG9uID0gc2NyZWVuLmdldEJ5VGV4dChcIkxvZ2luXCIpO1xuICAgIFxuICAgIGF3YWl0IGFjdChhc3luYyAoKSA9PiB7XG4gICAgICBsb2dpbkJ1dHRvbi5jbGljaygpO1xuICAgIH0pO1xuXG4gICAgLy8gV2FpdCBmb3IgYW55IGFzeW5jIHN0YXRlIHVwZGF0ZXMgdG8gY29tcGxldGVcbiAgICBhd2FpdCB3YWl0Rm9yKCgpID0+IHtcbiAgICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXN0SWQoXCJhdXRoLXN0YXR1c1wiKSkudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgaXQoXCJzaG91bGQgaGFuZGxlIGxvZ291dFwiLCBhc3luYyAoKSA9PiB7XG4gICAgcmVuZGVyV2l0aEF1dGgoKTtcbiAgICBcbiAgICBjb25zdCBsb2dvdXRCdXR0b24gPSBzY3JlZW4uZ2V0QnlUZXh0KFwiTG9nb3V0XCIpO1xuICAgIFxuICAgIGF3YWl0IGFjdChhc3luYyAoKSA9PiB7XG4gICAgICBsb2dvdXRCdXR0b24uY2xpY2soKTtcbiAgICB9KTtcblxuICAgIC8vIFdhaXQgZm9yIGxvZ291dCB0byBjb21wbGV0ZSBhbmQgdmVyaWZ5IHN0YXRlXG4gICAgYXdhaXQgd2FpdEZvcigoKSA9PiB7XG4gICAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGVzdElkKFwiYXV0aC1zdGF0dXNcIikpLnRvSGF2ZVRleHRDb250ZW50KFwibm90LWF1dGhlbnRpY2F0ZWRcIik7XG4gICAgfSk7XG4gIH0pO1xufSk7XG4iXSwidmVyc2lvbiI6M30=