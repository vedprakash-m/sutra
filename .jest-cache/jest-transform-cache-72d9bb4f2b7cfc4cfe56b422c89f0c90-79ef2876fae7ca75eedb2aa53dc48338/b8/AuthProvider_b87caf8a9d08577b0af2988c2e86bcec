5441f0ab7ea77e83c35028ed5a95f2c5
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useAuth = useAuth;
exports.AuthProvider = AuthProvider;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const AuthContext = (0, react_1.createContext)(undefined);
function useAuth() {
    const context = (0, react_1.useContext)(AuthContext);
    if (context === undefined) {
        throw new Error("useAuth must be used within an AuthProvider");
    }
    return context;
}
function AuthProvider({ children }) {
    const [user, setUser] = (0, react_1.useState)(null);
    const [isLoading, setIsLoading] = (0, react_1.useState)(true);
    const [token, setToken] = (0, react_1.useState)(null);
    const isAuthenticated = !!user;
    const isAdmin = user?.roles.includes("admin") ?? false;
    // Initialize auth state from localStorage
    (0, react_1.useEffect)(() => {
        const savedUser = localStorage.getItem("sutra_user");
        const savedToken = localStorage.getItem("sutra_token");
        if (savedUser && savedToken) {
            setUser(JSON.parse(savedUser));
            setToken(savedToken);
        }
        setIsLoading(false);
    }, []);
    const login = async (email = "user@sutra.ai", isAdminUser = false) => {
        setIsLoading(true);
        try {
            // Development mode authentication
            const mockUser = {
                id: isAdminUser ? "mock-admin-id" : "mock-user-id",
                email: isAdminUser ? "admin@sutra.ai" : email,
                name: isAdminUser ? "Development Admin" : "Development User",
                roles: isAdminUser ? ["admin", "user"] : ["user"],
            };
            const mockToken = isAdminUser ? "mock-admin-token" : "mock-token";
            setUser(mockUser);
            setToken(mockToken);
            // Save to localStorage
            localStorage.setItem("sutra_user", JSON.stringify(mockUser));
            localStorage.setItem("sutra_token", mockToken);
        }
        catch (error) {
            console.error("Login failed:", error);
            throw error;
        }
        finally {
            setIsLoading(false);
        }
    };
    const logout = async () => {
        setUser(null);
        setToken(null);
        localStorage.removeItem("sutra_user");
        localStorage.removeItem("sutra_token");
    };
    const value = {
        user,
        isAuthenticated,
        isLoading,
        login,
        logout,
        isAdmin,
        token,
    };
    return (0, jsx_runtime_1.jsx)(AuthContext.Provider, { value: value, children: children });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL3ZlZHByYWthc2htaXNocmEvc3V0cmEvc3JjL2NvbXBvbmVudHMvYXV0aC9BdXRoUHJvdmlkZXIudHN4IiwibWFwcGluZ3MiOiI7O0FBMkJBLDBCQU1DO0FBTUQsb0NBaUVDOztBQXhHRCxpQ0FNZTtBQW1CZixNQUFNLFdBQVcsR0FBRyxJQUFBLHFCQUFhLEVBQThCLFNBQVMsQ0FBQyxDQUFDO0FBRTFFLFNBQWdCLE9BQU87SUFDckIsTUFBTSxPQUFPLEdBQUcsSUFBQSxrQkFBVSxFQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQ3hDLElBQUksT0FBTyxLQUFLLFNBQVMsRUFBRSxDQUFDO1FBQzFCLE1BQU0sSUFBSSxLQUFLLENBQUMsNkNBQTZDLENBQUMsQ0FBQztJQUNqRSxDQUFDO0lBQ0QsT0FBTyxPQUFPLENBQUM7QUFDakIsQ0FBQztBQU1ELFNBQWdCLFlBQVksQ0FBQyxFQUFFLFFBQVEsRUFBcUI7SUFDMUQsTUFBTSxDQUFDLElBQUksRUFBRSxPQUFPLENBQUMsR0FBRyxJQUFBLGdCQUFRLEVBQWMsSUFBSSxDQUFDLENBQUM7SUFDcEQsTUFBTSxDQUFDLFNBQVMsRUFBRSxZQUFZLENBQUMsR0FBRyxJQUFBLGdCQUFRLEVBQUMsSUFBSSxDQUFDLENBQUM7SUFDakQsTUFBTSxDQUFDLEtBQUssRUFBRSxRQUFRLENBQUMsR0FBRyxJQUFBLGdCQUFRLEVBQWdCLElBQUksQ0FBQyxDQUFDO0lBRXhELE1BQU0sZUFBZSxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUM7SUFDL0IsTUFBTSxPQUFPLEdBQUcsSUFBSSxFQUFFLEtBQUssQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLElBQUksS0FBSyxDQUFDO0lBRXZELDBDQUEwQztJQUMxQyxJQUFBLGlCQUFTLEVBQUMsR0FBRyxFQUFFO1FBQ2IsTUFBTSxTQUFTLEdBQUcsWUFBWSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUNyRCxNQUFNLFVBQVUsR0FBRyxZQUFZLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFDO1FBRXZELElBQUksU0FBUyxJQUFJLFVBQVUsRUFBRSxDQUFDO1lBQzVCLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUM7WUFDL0IsUUFBUSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQ3ZCLENBQUM7UUFDRCxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDdEIsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBRVAsTUFBTSxLQUFLLEdBQUcsS0FBSyxFQUFFLEtBQUssR0FBRyxlQUFlLEVBQUUsV0FBVyxHQUFHLEtBQUssRUFBRSxFQUFFO1FBQ25FLFlBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNuQixJQUFJLENBQUM7WUFDSCxrQ0FBa0M7WUFDbEMsTUFBTSxRQUFRLEdBQVM7Z0JBQ3JCLEVBQUUsRUFBRSxXQUFXLENBQUMsQ0FBQyxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsY0FBYztnQkFDbEQsS0FBSyxFQUFFLFdBQVcsQ0FBQyxDQUFDLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDLEtBQUs7Z0JBQzdDLElBQUksRUFBRSxXQUFXLENBQUMsQ0FBQyxDQUFDLG1CQUFtQixDQUFDLENBQUMsQ0FBQyxrQkFBa0I7Z0JBQzVELEtBQUssRUFBRSxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQzthQUNsRCxDQUFDO1lBRUYsTUFBTSxTQUFTLEdBQUcsV0FBVyxDQUFDLENBQUMsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDO1lBRWxFLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUNsQixRQUFRLENBQUMsU0FBUyxDQUFDLENBQUM7WUFFcEIsdUJBQXVCO1lBQ3ZCLFlBQVksQ0FBQyxPQUFPLENBQUMsWUFBWSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztZQUM3RCxZQUFZLENBQUMsT0FBTyxDQUFDLGFBQWEsRUFBRSxTQUFTLENBQUMsQ0FBQztRQUNqRCxDQUFDO1FBQUMsT0FBTyxLQUFLLEVBQUUsQ0FBQztZQUNmLE9BQU8sQ0FBQyxLQUFLLENBQUMsZUFBZSxFQUFFLEtBQUssQ0FBQyxDQUFDO1lBQ3RDLE1BQU0sS0FBSyxDQUFDO1FBQ2QsQ0FBQztnQkFBUyxDQUFDO1lBQ1QsWUFBWSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3RCLENBQUM7SUFDSCxDQUFDLENBQUM7SUFFRixNQUFNLE1BQU0sR0FBRyxLQUFLLElBQUksRUFBRTtRQUN4QixPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDZCxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDZixZQUFZLENBQUMsVUFBVSxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBQ3RDLFlBQVksQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUFDLENBQUM7SUFDekMsQ0FBQyxDQUFDO0lBRUYsTUFBTSxLQUFLLEdBQW9CO1FBQzdCLElBQUk7UUFDSixlQUFlO1FBQ2YsU0FBUztRQUNULEtBQUs7UUFDTCxNQUFNO1FBQ04sT0FBTztRQUNQLEtBQUs7S0FDTixDQUFDO0lBRUYsT0FBTyx1QkFBQyxXQUFXLENBQUMsUUFBUSxJQUFDLEtBQUssRUFBRSxLQUFLLFlBQUcsUUFBUSxHQUF3QixDQUFDO0FBQy9FLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL1VzZXJzL3ZlZHByYWthc2htaXNocmEvc3V0cmEvc3JjL2NvbXBvbmVudHMvYXV0aC9BdXRoUHJvdmlkZXIudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIGNyZWF0ZUNvbnRleHQsXG4gIHVzZUNvbnRleHQsXG4gIFJlYWN0Tm9kZSxcbiAgdXNlU3RhdGUsXG4gIHVzZUVmZmVjdCxcbn0gZnJvbSBcInJlYWN0XCI7XG5cbmludGVyZmFjZSBVc2VyIHtcbiAgaWQ6IHN0cmluZztcbiAgZW1haWw6IHN0cmluZztcbiAgbmFtZTogc3RyaW5nO1xuICByb2xlczogc3RyaW5nW107XG59XG5cbmludGVyZmFjZSBBdXRoQ29udGV4dFR5cGUge1xuICB1c2VyOiBVc2VyIHwgbnVsbDtcbiAgaXNBdXRoZW50aWNhdGVkOiBib29sZWFuO1xuICBpc0xvYWRpbmc6IGJvb2xlYW47XG4gIGxvZ2luOiAoZW1haWw/OiBzdHJpbmcsIGlzQWRtaW4/OiBib29sZWFuKSA9PiBQcm9taXNlPHZvaWQ+O1xuICBsb2dvdXQ6ICgpID0+IFByb21pc2U8dm9pZD47XG4gIGlzQWRtaW46IGJvb2xlYW47XG4gIHRva2VuOiBzdHJpbmcgfCBudWxsO1xufVxuXG5jb25zdCBBdXRoQ29udGV4dCA9IGNyZWF0ZUNvbnRleHQ8QXV0aENvbnRleHRUeXBlIHwgdW5kZWZpbmVkPih1bmRlZmluZWQpO1xuXG5leHBvcnQgZnVuY3Rpb24gdXNlQXV0aCgpIHtcbiAgY29uc3QgY29udGV4dCA9IHVzZUNvbnRleHQoQXV0aENvbnRleHQpO1xuICBpZiAoY29udGV4dCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwidXNlQXV0aCBtdXN0IGJlIHVzZWQgd2l0aGluIGFuIEF1dGhQcm92aWRlclwiKTtcbiAgfVxuICByZXR1cm4gY29udGV4dDtcbn1cblxuaW50ZXJmYWNlIEF1dGhQcm92aWRlclByb3BzIHtcbiAgY2hpbGRyZW46IFJlYWN0Tm9kZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIEF1dGhQcm92aWRlcih7IGNoaWxkcmVuIH06IEF1dGhQcm92aWRlclByb3BzKSB7XG4gIGNvbnN0IFt1c2VyLCBzZXRVc2VyXSA9IHVzZVN0YXRlPFVzZXIgfCBudWxsPihudWxsKTtcbiAgY29uc3QgW2lzTG9hZGluZywgc2V0SXNMb2FkaW5nXSA9IHVzZVN0YXRlKHRydWUpO1xuICBjb25zdCBbdG9rZW4sIHNldFRva2VuXSA9IHVzZVN0YXRlPHN0cmluZyB8IG51bGw+KG51bGwpO1xuXG4gIGNvbnN0IGlzQXV0aGVudGljYXRlZCA9ICEhdXNlcjtcbiAgY29uc3QgaXNBZG1pbiA9IHVzZXI/LnJvbGVzLmluY2x1ZGVzKFwiYWRtaW5cIikgPz8gZmFsc2U7XG5cbiAgLy8gSW5pdGlhbGl6ZSBhdXRoIHN0YXRlIGZyb20gbG9jYWxTdG9yYWdlXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgY29uc3Qgc2F2ZWRVc2VyID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oXCJzdXRyYV91c2VyXCIpO1xuICAgIGNvbnN0IHNhdmVkVG9rZW4gPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShcInN1dHJhX3Rva2VuXCIpO1xuXG4gICAgaWYgKHNhdmVkVXNlciAmJiBzYXZlZFRva2VuKSB7XG4gICAgICBzZXRVc2VyKEpTT04ucGFyc2Uoc2F2ZWRVc2VyKSk7XG4gICAgICBzZXRUb2tlbihzYXZlZFRva2VuKTtcbiAgICB9XG4gICAgc2V0SXNMb2FkaW5nKGZhbHNlKTtcbiAgfSwgW10pO1xuXG4gIGNvbnN0IGxvZ2luID0gYXN5bmMgKGVtYWlsID0gXCJ1c2VyQHN1dHJhLmFpXCIsIGlzQWRtaW5Vc2VyID0gZmFsc2UpID0+IHtcbiAgICBzZXRJc0xvYWRpbmcodHJ1ZSk7XG4gICAgdHJ5IHtcbiAgICAgIC8vIERldmVsb3BtZW50IG1vZGUgYXV0aGVudGljYXRpb25cbiAgICAgIGNvbnN0IG1vY2tVc2VyOiBVc2VyID0ge1xuICAgICAgICBpZDogaXNBZG1pblVzZXIgPyBcIm1vY2stYWRtaW4taWRcIiA6IFwibW9jay11c2VyLWlkXCIsXG4gICAgICAgIGVtYWlsOiBpc0FkbWluVXNlciA/IFwiYWRtaW5Ac3V0cmEuYWlcIiA6IGVtYWlsLFxuICAgICAgICBuYW1lOiBpc0FkbWluVXNlciA/IFwiRGV2ZWxvcG1lbnQgQWRtaW5cIiA6IFwiRGV2ZWxvcG1lbnQgVXNlclwiLFxuICAgICAgICByb2xlczogaXNBZG1pblVzZXIgPyBbXCJhZG1pblwiLCBcInVzZXJcIl0gOiBbXCJ1c2VyXCJdLFxuICAgICAgfTtcblxuICAgICAgY29uc3QgbW9ja1Rva2VuID0gaXNBZG1pblVzZXIgPyBcIm1vY2stYWRtaW4tdG9rZW5cIiA6IFwibW9jay10b2tlblwiO1xuXG4gICAgICBzZXRVc2VyKG1vY2tVc2VyKTtcbiAgICAgIHNldFRva2VuKG1vY2tUb2tlbik7XG5cbiAgICAgIC8vIFNhdmUgdG8gbG9jYWxTdG9yYWdlXG4gICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShcInN1dHJhX3VzZXJcIiwgSlNPTi5zdHJpbmdpZnkobW9ja1VzZXIpKTtcbiAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKFwic3V0cmFfdG9rZW5cIiwgbW9ja1Rva2VuKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcihcIkxvZ2luIGZhaWxlZDpcIiwgZXJyb3IpO1xuICAgICAgdGhyb3cgZXJyb3I7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIHNldElzTG9hZGluZyhmYWxzZSk7XG4gICAgfVxuICB9O1xuXG4gIGNvbnN0IGxvZ291dCA9IGFzeW5jICgpID0+IHtcbiAgICBzZXRVc2VyKG51bGwpO1xuICAgIHNldFRva2VuKG51bGwpO1xuICAgIGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKFwic3V0cmFfdXNlclwiKTtcbiAgICBsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbShcInN1dHJhX3Rva2VuXCIpO1xuICB9O1xuXG4gIGNvbnN0IHZhbHVlOiBBdXRoQ29udGV4dFR5cGUgPSB7XG4gICAgdXNlcixcbiAgICBpc0F1dGhlbnRpY2F0ZWQsXG4gICAgaXNMb2FkaW5nLFxuICAgIGxvZ2luLFxuICAgIGxvZ291dCxcbiAgICBpc0FkbWluLFxuICAgIHRva2VuLFxuICB9O1xuXG4gIHJldHVybiA8QXV0aENvbnRleHQuUHJvdmlkZXIgdmFsdWU9e3ZhbHVlfT57Y2hpbGRyZW59PC9BdXRoQ29udGV4dC5Qcm92aWRlcj47XG59XG4iXSwidmVyc2lvbiI6M30=