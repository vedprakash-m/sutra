{"file":"/Users/vedprakashmishra/sutra/src/components/auth/AuthProvider.tsx","mappings":"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","names":[],"sources":["/Users/vedprakashmishra/sutra/src/components/auth/AuthProvider.tsx"],"sourcesContent":["import {\n  createContext,\n  useContext,\n  ReactNode,\n  useState,\n  useEffect,\n} from \"react\";\n\ninterface User {\n  id: string;\n  email: string;\n  name: string;\n  roles: string[];\n}\n\ninterface AuthContextType {\n  user: User | null;\n  isAuthenticated: boolean;\n  isLoading: boolean;\n  login: (email?: string, isAdmin?: boolean) => Promise<void>;\n  logout: () => Promise<void>;\n  isAdmin: boolean;\n  token: string | null;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n}\n\ninterface AuthProviderProps {\n  children: ReactNode;\n}\n\nexport function AuthProvider({ children }: AuthProviderProps) {\n  const [user, setUser] = useState<User | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [token, setToken] = useState<string | null>(null);\n\n  const isAuthenticated = !!user;\n  const isAdmin = user?.roles.includes(\"admin\") ?? false;\n\n  // Initialize auth state from localStorage\n  useEffect(() => {\n    const savedUser = localStorage.getItem(\"sutra_user\");\n    const savedToken = localStorage.getItem(\"sutra_token\");\n\n    if (savedUser && savedToken) {\n      setUser(JSON.parse(savedUser));\n      setToken(savedToken);\n    }\n    setIsLoading(false);\n  }, []);\n\n  const login = async (email = \"user@sutra.ai\", isAdminUser = false) => {\n    setIsLoading(true);\n    try {\n      // Development mode authentication\n      const mockUser: User = {\n        id: isAdminUser ? \"mock-admin-id\" : \"mock-user-id\",\n        email: isAdminUser ? \"admin@sutra.ai\" : email,\n        name: isAdminUser ? \"Development Admin\" : \"Development User\",\n        roles: isAdminUser ? [\"admin\", \"user\"] : [\"user\"],\n      };\n\n      const mockToken = isAdminUser ? \"mock-admin-token\" : \"mock-token\";\n\n      setUser(mockUser);\n      setToken(mockToken);\n\n      // Save to localStorage\n      localStorage.setItem(\"sutra_user\", JSON.stringify(mockUser));\n      localStorage.setItem(\"sutra_token\", mockToken);\n    } catch (error) {\n      console.error(\"Login failed:\", error);\n      throw error;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const logout = async () => {\n    setUser(null);\n    setToken(null);\n    localStorage.removeItem(\"sutra_user\");\n    localStorage.removeItem(\"sutra_token\");\n  };\n\n  const value: AuthContextType = {\n    user,\n    isAuthenticated,\n    isLoading,\n    login,\n    logout,\n    isAdmin,\n    token,\n  };\n\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\n}\n"],"version":3}