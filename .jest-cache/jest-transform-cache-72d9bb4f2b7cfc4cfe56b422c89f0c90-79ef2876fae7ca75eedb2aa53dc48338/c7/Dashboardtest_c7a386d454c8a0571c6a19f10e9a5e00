79a0a9e4e12f9f0130b1dd91b6914514
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
// Mock the API services first
jest.mock("@/services/api", () => ({
    collectionsApi: {
        getCollections: jest.fn(),
        createCollection: jest.fn(),
        updateCollection: jest.fn(),
        deleteCollection: jest.fn(),
    },
    playbooksApi: {
        getPlaybooks: jest.fn(),
        createPlaybook: jest.fn(),
        updatePlaybook: jest.fn(),
        deletePlaybook: jest.fn(),
    },
}));
// Mock the useAuth hook to return unauthenticated state
jest.mock("@/components/auth/AuthProvider", () => ({
    AuthProvider: ({ children }) => ((0, jsx_runtime_1.jsx)("div", { children: children })),
    useAuth: () => ({
        user: null,
        isAuthenticated: false,
        isLoading: false,
        login: jest.fn(),
        logout: jest.fn(),
        isAdmin: false,
    }),
}));
const react_1 = __importDefault(require("react"));
const react_2 = require("@testing-library/react");
const react_router_dom_1 = require("react-router-dom");
const AuthProvider_1 = require("@/components/auth/AuthProvider");
const Dashboard_1 = __importDefault(require("@/components/dashboard/Dashboard"));
describe("Dashboard", () => {
    it("should render welcome message when not authenticated", () => {
        (0, react_2.render)((0, jsx_runtime_1.jsx)(react_router_dom_1.BrowserRouter, { children: (0, jsx_runtime_1.jsx)(AuthProvider_1.AuthProvider, { children: (0, jsx_runtime_1.jsx)(Dashboard_1.default, {}) }) }));
        expect(react_2.screen.getByText("Welcome to Sutra")).toBeInTheDocument();
        expect(react_2.screen.getByText("AI Operations Platform for systematic prompt engineering")).toBeInTheDocument();
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL3ZlZHByYWthc2htaXNocmEvc3V0cmEvc3JjL2NvbXBvbmVudHMvZGFzaGJvYXJkL0Rhc2hib2FyZC50ZXN0LnRzeCIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFNQSw4QkFBOEI7QUFDOUIsSUFBSSxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDO0lBQ2pDLGNBQWMsRUFBRTtRQUNkLGNBQWMsRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFO1FBQ3pCLGdCQUFnQixFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUU7UUFDM0IsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRTtRQUMzQixnQkFBZ0IsRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFO0tBQzVCO0lBQ0QsWUFBWSxFQUFFO1FBQ1osWUFBWSxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUU7UUFDdkIsY0FBYyxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUU7UUFDekIsY0FBYyxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUU7UUFDekIsY0FBYyxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUU7S0FDMUI7Q0FDRixDQUFDLENBQUMsQ0FBQztBQUVKLHdEQUF3RDtBQUN4RCxJQUFJLENBQUMsSUFBSSxDQUFDLGdDQUFnQyxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUM7SUFDakQsWUFBWSxFQUFFLENBQUMsRUFBRSxRQUFRLEVBQWlDLEVBQUUsRUFBRSxDQUFDLENBQzdELDBDQUFNLFFBQVEsR0FBTyxDQUN0QjtJQUNELE9BQU8sRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDO1FBQ2QsSUFBSSxFQUFFLElBQUk7UUFDVixlQUFlLEVBQUUsS0FBSztRQUN0QixTQUFTLEVBQUUsS0FBSztRQUNoQixLQUFLLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRTtRQUNoQixNQUFNLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRTtRQUNqQixPQUFPLEVBQUUsS0FBSztLQUNmLENBQUM7Q0FDSCxDQUFDLENBQUMsQ0FBQztBQW5DSixrREFBMEI7QUFDMUIsa0RBQXdEO0FBQ3hELHVEQUFpRDtBQUNqRCxpRUFBOEQ7QUFDOUQsaUZBQXlEO0FBaUN6RCxRQUFRLENBQUMsV0FBVyxFQUFFLEdBQUcsRUFBRTtJQUN6QixFQUFFLENBQUMsc0RBQXNELEVBQUUsR0FBRyxFQUFFO1FBQzlELElBQUEsY0FBTSxFQUNKLHVCQUFDLGdDQUFhLGNBQ1osdUJBQUMsMkJBQVksY0FDWCx1QkFBQyxtQkFBUyxLQUFHLEdBQ0EsR0FDRCxDQUNqQixDQUFDO1FBRUYsTUFBTSxDQUFDLGNBQU0sQ0FBQyxTQUFTLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxDQUFDLGlCQUFpQixFQUFFLENBQUM7UUFDakUsTUFBTSxDQUNKLGNBQU0sQ0FBQyxTQUFTLENBQ2QsMERBQTBELENBQzNELENBQ0YsQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO0lBQ3hCLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL1VzZXJzL3ZlZHByYWthc2htaXNocmEvc3V0cmEvc3JjL2NvbXBvbmVudHMvZGFzaGJvYXJkL0Rhc2hib2FyZC50ZXN0LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyByZW5kZXIsIHNjcmVlbiB9IGZyb20gXCJAdGVzdGluZy1saWJyYXJ5L3JlYWN0XCI7XG5pbXBvcnQgeyBCcm93c2VyUm91dGVyIH0gZnJvbSBcInJlYWN0LXJvdXRlci1kb21cIjtcbmltcG9ydCB7IEF1dGhQcm92aWRlciB9IGZyb20gXCJAL2NvbXBvbmVudHMvYXV0aC9BdXRoUHJvdmlkZXJcIjtcbmltcG9ydCBEYXNoYm9hcmQgZnJvbSBcIkAvY29tcG9uZW50cy9kYXNoYm9hcmQvRGFzaGJvYXJkXCI7XG5cbi8vIE1vY2sgdGhlIEFQSSBzZXJ2aWNlcyBmaXJzdFxuamVzdC5tb2NrKFwiQC9zZXJ2aWNlcy9hcGlcIiwgKCkgPT4gKHtcbiAgY29sbGVjdGlvbnNBcGk6IHtcbiAgICBnZXRDb2xsZWN0aW9uczogamVzdC5mbigpLFxuICAgIGNyZWF0ZUNvbGxlY3Rpb246IGplc3QuZm4oKSxcbiAgICB1cGRhdGVDb2xsZWN0aW9uOiBqZXN0LmZuKCksXG4gICAgZGVsZXRlQ29sbGVjdGlvbjogamVzdC5mbigpLFxuICB9LFxuICBwbGF5Ym9va3NBcGk6IHtcbiAgICBnZXRQbGF5Ym9va3M6IGplc3QuZm4oKSxcbiAgICBjcmVhdGVQbGF5Ym9vazogamVzdC5mbigpLFxuICAgIHVwZGF0ZVBsYXlib29rOiBqZXN0LmZuKCksXG4gICAgZGVsZXRlUGxheWJvb2s6IGplc3QuZm4oKSxcbiAgfSxcbn0pKTtcblxuLy8gTW9jayB0aGUgdXNlQXV0aCBob29rIHRvIHJldHVybiB1bmF1dGhlbnRpY2F0ZWQgc3RhdGVcbmplc3QubW9jayhcIkAvY29tcG9uZW50cy9hdXRoL0F1dGhQcm92aWRlclwiLCAoKSA9PiAoe1xuICBBdXRoUHJvdmlkZXI6ICh7IGNoaWxkcmVuIH06IHsgY2hpbGRyZW46IFJlYWN0LlJlYWN0Tm9kZSB9KSA9PiAoXG4gICAgPGRpdj57Y2hpbGRyZW59PC9kaXY+XG4gICksXG4gIHVzZUF1dGg6ICgpID0+ICh7XG4gICAgdXNlcjogbnVsbCxcbiAgICBpc0F1dGhlbnRpY2F0ZWQ6IGZhbHNlLFxuICAgIGlzTG9hZGluZzogZmFsc2UsXG4gICAgbG9naW46IGplc3QuZm4oKSxcbiAgICBsb2dvdXQ6IGplc3QuZm4oKSxcbiAgICBpc0FkbWluOiBmYWxzZSxcbiAgfSksXG59KSk7XG5cbmRlc2NyaWJlKFwiRGFzaGJvYXJkXCIsICgpID0+IHtcbiAgaXQoXCJzaG91bGQgcmVuZGVyIHdlbGNvbWUgbWVzc2FnZSB3aGVuIG5vdCBhdXRoZW50aWNhdGVkXCIsICgpID0+IHtcbiAgICByZW5kZXIoXG4gICAgICA8QnJvd3NlclJvdXRlcj5cbiAgICAgICAgPEF1dGhQcm92aWRlcj5cbiAgICAgICAgICA8RGFzaGJvYXJkIC8+XG4gICAgICAgIDwvQXV0aFByb3ZpZGVyPlxuICAgICAgPC9Ccm93c2VyUm91dGVyPixcbiAgICApO1xuXG4gICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRleHQoXCJXZWxjb21lIHRvIFN1dHJhXCIpKS50b0JlSW5UaGVEb2N1bWVudCgpO1xuICAgIGV4cGVjdChcbiAgICAgIHNjcmVlbi5nZXRCeVRleHQoXG4gICAgICAgIFwiQUkgT3BlcmF0aW9ucyBQbGF0Zm9ybSBmb3Igc3lzdGVtYXRpYyBwcm9tcHQgZW5naW5lZXJpbmdcIixcbiAgICAgICksXG4gICAgKS50b0JlSW5UaGVEb2N1bWVudCgpO1xuICB9KTtcbn0pO1xuIl0sInZlcnNpb24iOjN9