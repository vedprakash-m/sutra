c339dfc8550bf11d8a6b5930a9f2bdd9
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("@testing-library/react");
const AuthProvider_1 = require("../AuthProvider");
const react_router_dom_1 = require("react-router-dom");
const react_2 = require("react");
// Test component that uses the auth context
function TestComponent() {
    const { user, isAuthenticated, isAdmin, login, logout } = (0, AuthProvider_1.useAuth)();
    return ((0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)("div", { "data-testid": "auth-status", children: isAuthenticated ? "authenticated" : "not-authenticated" }), (0, jsx_runtime_1.jsx)("div", { "data-testid": "user-info", children: user ? `User: ${user.name}` : "No user" }), (0, jsx_runtime_1.jsx)("div", { "data-testid": "admin-status", children: isAdmin ? "admin" : "not-admin" }), (0, jsx_runtime_1.jsx)("button", { onClick: () => login("test@example.com"), children: "Login" }), (0, jsx_runtime_1.jsx)("button", { onClick: logout, children: "Logout" })] }));
}
describe("AuthProvider", () => {
    const renderWithAuth = () => {
        return (0, react_1.render)((0, jsx_runtime_1.jsx)(react_router_dom_1.BrowserRouter, { children: (0, jsx_runtime_1.jsx)(AuthProvider_1.AuthProvider, { children: (0, jsx_runtime_1.jsx)(TestComponent, {}) }) }));
    };
    it("should provide initial unauthenticated state", () => {
        renderWithAuth();
        expect(react_1.screen.getByTestId("auth-status")).toHaveTextContent("not-authenticated");
        expect(react_1.screen.getByTestId("user-info")).toHaveTextContent("No user");
        expect(react_1.screen.getByTestId("admin-status")).toHaveTextContent("not-admin");
    });
    it("should handle login", async () => {
        renderWithAuth();
        const loginButton = react_1.screen.getByText("Login");
        await (0, react_2.act)(async () => {
            loginButton.click();
        });
        // Wait for any async state updates to complete
        await (0, react_1.waitFor)(() => {
            expect(react_1.screen.getByTestId("auth-status")).toBeInTheDocument();
        });
    });
    it("should handle logout", async () => {
        renderWithAuth();
        const logoutButton = react_1.screen.getByText("Logout");
        await (0, react_2.act)(async () => {
            logoutButton.click();
        });
        // Wait for logout to complete and verify state
        await (0, react_1.waitFor)(() => {
            expect(react_1.screen.getByTestId("auth-status")).toHaveTextContent("not-authenticated");
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL3ZlZHByYWthc2htaXNocmEvc3V0cmEvc3JjL2NvbXBvbmVudHMvYXV0aC9fX3Rlc3RzX18vQXV0aFByb3ZpZGVyLnRlc3QudHN4IiwibWFwcGluZ3MiOiI7OztBQUFBLGtEQUE0RTtBQUM1RSxrREFBd0Q7QUFDeEQsdURBQWlEO0FBQ2pELGlDQUE0QjtBQUU1Qiw0Q0FBNEM7QUFDNUMsU0FBUyxhQUFhO0lBQ3BCLE1BQU0sRUFBRSxJQUFJLEVBQUUsZUFBZSxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLEdBQUcsSUFBQSxzQkFBTyxHQUFFLENBQUM7SUFFcEUsT0FBTyxDQUNMLDRDQUNFLCtDQUFpQixhQUFhLFlBQzNCLGVBQWUsQ0FBQyxDQUFDLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQyxtQkFBbUIsR0FDcEQsRUFDTiwrQ0FBaUIsV0FBVyxZQUN6QixJQUFJLENBQUMsQ0FBQyxDQUFDLFNBQVMsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyxTQUFTLEdBQ3BDLEVBQ04sK0NBQWlCLGNBQWMsWUFDNUIsT0FBTyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLFdBQVcsR0FDNUIsRUFDTixtQ0FBUSxPQUFPLEVBQUUsR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDLGtCQUFrQixDQUFDLHNCQUV2QyxFQUNULG1DQUFRLE9BQU8sRUFBRSxNQUFNLHVCQUFpQixJQUNwQyxDQUNQLENBQUM7QUFDSixDQUFDO0FBRUQsUUFBUSxDQUFDLGNBQWMsRUFBRSxHQUFHLEVBQUU7SUFDNUIsTUFBTSxjQUFjLEdBQUcsR0FBRyxFQUFFO1FBQzFCLE9BQU8sSUFBQSxjQUFNLEVBQ1gsdUJBQUMsZ0NBQWEsY0FDWix1QkFBQywyQkFBWSxjQUNYLHVCQUFDLGFBQWEsS0FBRyxHQUNKLEdBQ0QsQ0FDakIsQ0FBQztJQUNKLENBQUMsQ0FBQztJQUVGLEVBQUUsQ0FBQyw4Q0FBOEMsRUFBRSxHQUFHLEVBQUU7UUFDdEQsY0FBYyxFQUFFLENBQUM7UUFFakIsTUFBTSxDQUFDLGNBQU0sQ0FBQyxXQUFXLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxpQkFBaUIsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO1FBQ2pGLE1BQU0sQ0FBQyxjQUFNLENBQUMsV0FBVyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsaUJBQWlCLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDckUsTUFBTSxDQUFDLGNBQU0sQ0FBQyxXQUFXLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxpQkFBaUIsQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUM1RSxDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQyxxQkFBcUIsRUFBRSxLQUFLLElBQUksRUFBRTtRQUNuQyxjQUFjLEVBQUUsQ0FBQztRQUVqQixNQUFNLFdBQVcsR0FBRyxjQUFNLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBRTlDLE1BQU0sSUFBQSxXQUFHLEVBQUMsS0FBSyxJQUFJLEVBQUU7WUFDbkIsV0FBVyxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQ3RCLENBQUMsQ0FBQyxDQUFDO1FBRUgsK0NBQStDO1FBQy9DLE1BQU0sSUFBQSxlQUFPLEVBQUMsR0FBRyxFQUFFO1lBQ2pCLE1BQU0sQ0FBQyxjQUFNLENBQUMsV0FBVyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsaUJBQWlCLEVBQUUsQ0FBQztRQUNoRSxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLHNCQUFzQixFQUFFLEtBQUssSUFBSSxFQUFFO1FBQ3BDLGNBQWMsRUFBRSxDQUFDO1FBRWpCLE1BQU0sWUFBWSxHQUFHLGNBQU0sQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLENBQUM7UUFFaEQsTUFBTSxJQUFBLFdBQUcsRUFBQyxLQUFLLElBQUksRUFBRTtZQUNuQixZQUFZLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDdkIsQ0FBQyxDQUFDLENBQUM7UUFFSCwrQ0FBK0M7UUFDL0MsTUFBTSxJQUFBLGVBQU8sRUFBQyxHQUFHLEVBQUU7WUFDakIsTUFBTSxDQUFDLGNBQU0sQ0FBQyxXQUFXLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxpQkFBaUIsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO1FBQ25GLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMvdmVkcHJha2FzaG1pc2hyYS9zdXRyYS9zcmMvY29tcG9uZW50cy9hdXRoL19fdGVzdHNfXy9BdXRoUHJvdmlkZXIudGVzdC50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcmVuZGVyLCBzY3JlZW4sIGZpcmVFdmVudCwgd2FpdEZvciB9IGZyb20gXCJAdGVzdGluZy1saWJyYXJ5L3JlYWN0XCI7XG5pbXBvcnQgeyBBdXRoUHJvdmlkZXIsIHVzZUF1dGggfSBmcm9tIFwiLi4vQXV0aFByb3ZpZGVyXCI7XG5pbXBvcnQgeyBCcm93c2VyUm91dGVyIH0gZnJvbSBcInJlYWN0LXJvdXRlci1kb21cIjtcbmltcG9ydCB7IGFjdCB9IGZyb20gXCJyZWFjdFwiO1xuXG4vLyBUZXN0IGNvbXBvbmVudCB0aGF0IHVzZXMgdGhlIGF1dGggY29udGV4dFxuZnVuY3Rpb24gVGVzdENvbXBvbmVudCgpIHtcbiAgY29uc3QgeyB1c2VyLCBpc0F1dGhlbnRpY2F0ZWQsIGlzQWRtaW4sIGxvZ2luLCBsb2dvdXQgfSA9IHVzZUF1dGgoKTtcbiAgXG4gIHJldHVybiAoXG4gICAgPGRpdj5cbiAgICAgIDxkaXYgZGF0YS10ZXN0aWQ9XCJhdXRoLXN0YXR1c1wiPlxuICAgICAgICB7aXNBdXRoZW50aWNhdGVkID8gXCJhdXRoZW50aWNhdGVkXCIgOiBcIm5vdC1hdXRoZW50aWNhdGVkXCJ9XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgZGF0YS10ZXN0aWQ9XCJ1c2VyLWluZm9cIj5cbiAgICAgICAge3VzZXIgPyBgVXNlcjogJHt1c2VyLm5hbWV9YCA6IFwiTm8gdXNlclwifVxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IGRhdGEtdGVzdGlkPVwiYWRtaW4tc3RhdHVzXCI+XG4gICAgICAgIHtpc0FkbWluID8gXCJhZG1pblwiIDogXCJub3QtYWRtaW5cIn1cbiAgICAgIDwvZGl2PlxuICAgICAgPGJ1dHRvbiBvbkNsaWNrPXsoKSA9PiBsb2dpbihcInRlc3RAZXhhbXBsZS5jb21cIil9PlxuICAgICAgICBMb2dpblxuICAgICAgPC9idXR0b24+XG4gICAgICA8YnV0dG9uIG9uQ2xpY2s9e2xvZ291dH0+TG9nb3V0PC9idXR0b24+XG4gICAgPC9kaXY+XG4gICk7XG59XG5cbmRlc2NyaWJlKFwiQXV0aFByb3ZpZGVyXCIsICgpID0+IHtcbiAgY29uc3QgcmVuZGVyV2l0aEF1dGggPSAoKSA9PiB7XG4gICAgcmV0dXJuIHJlbmRlcihcbiAgICAgIDxCcm93c2VyUm91dGVyPlxuICAgICAgICA8QXV0aFByb3ZpZGVyPlxuICAgICAgICAgIDxUZXN0Q29tcG9uZW50IC8+XG4gICAgICAgIDwvQXV0aFByb3ZpZGVyPlxuICAgICAgPC9Ccm93c2VyUm91dGVyPlxuICAgICk7XG4gIH07XG5cbiAgaXQoXCJzaG91bGQgcHJvdmlkZSBpbml0aWFsIHVuYXV0aGVudGljYXRlZCBzdGF0ZVwiLCAoKSA9PiB7XG4gICAgcmVuZGVyV2l0aEF1dGgoKTtcbiAgICBcbiAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGVzdElkKFwiYXV0aC1zdGF0dXNcIikpLnRvSGF2ZVRleHRDb250ZW50KFwibm90LWF1dGhlbnRpY2F0ZWRcIik7XG4gICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRlc3RJZChcInVzZXItaW5mb1wiKSkudG9IYXZlVGV4dENvbnRlbnQoXCJObyB1c2VyXCIpO1xuICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXN0SWQoXCJhZG1pbi1zdGF0dXNcIikpLnRvSGF2ZVRleHRDb250ZW50KFwibm90LWFkbWluXCIpO1xuICB9KTtcblxuICBpdChcInNob3VsZCBoYW5kbGUgbG9naW5cIiwgYXN5bmMgKCkgPT4ge1xuICAgIHJlbmRlcldpdGhBdXRoKCk7XG4gICAgXG4gICAgY29uc3QgbG9naW5CdXR0b24gPSBzY3JlZW4uZ2V0QnlUZXh0KFwiTG9naW5cIik7XG4gICAgXG4gICAgYXdhaXQgYWN0KGFzeW5jICgpID0+IHtcbiAgICAgIGxvZ2luQnV0dG9uLmNsaWNrKCk7XG4gICAgfSk7XG5cbiAgICAvLyBXYWl0IGZvciBhbnkgYXN5bmMgc3RhdGUgdXBkYXRlcyB0byBjb21wbGV0ZVxuICAgIGF3YWl0IHdhaXRGb3IoKCkgPT4ge1xuICAgICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRlc3RJZChcImF1dGgtc3RhdHVzXCIpKS50b0JlSW5UaGVEb2N1bWVudCgpO1xuICAgIH0pO1xuICB9KTtcblxuICBpdChcInNob3VsZCBoYW5kbGUgbG9nb3V0XCIsIGFzeW5jICgpID0+IHtcbiAgICByZW5kZXJXaXRoQXV0aCgpO1xuICAgIFxuICAgIGNvbnN0IGxvZ291dEJ1dHRvbiA9IHNjcmVlbi5nZXRCeVRleHQoXCJMb2dvdXRcIik7XG4gICAgXG4gICAgYXdhaXQgYWN0KGFzeW5jICgpID0+IHtcbiAgICAgIGxvZ291dEJ1dHRvbi5jbGljaygpO1xuICAgIH0pO1xuXG4gICAgLy8gV2FpdCBmb3IgbG9nb3V0IHRvIGNvbXBsZXRlIGFuZCB2ZXJpZnkgc3RhdGVcbiAgICBhd2FpdCB3YWl0Rm9yKCgpID0+IHtcbiAgICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXN0SWQoXCJhdXRoLXN0YXR1c1wiKSkudG9IYXZlVGV4dENvbnRlbnQoXCJub3QtYXV0aGVudGljYXRlZFwiKTtcbiAgICB9KTtcbiAgfSk7XG59KTtcbiJdLCJ2ZXJzaW9uIjozfQ==