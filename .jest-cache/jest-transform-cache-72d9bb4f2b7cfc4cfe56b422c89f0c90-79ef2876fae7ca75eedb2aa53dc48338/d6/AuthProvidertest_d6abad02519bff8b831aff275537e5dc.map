{"file":"/Users/vedprakashmishra/sutra/src/components/auth/__tests__/AuthProvider.test.tsx","mappings":";;;AAAA,kDAA4E;AAC5E,kDAAwD;AACxD,uDAAiD;AACjD,iCAA4B;AAE5B,4CAA4C;AAC5C,SAAS,aAAa;IACpB,MAAM,EAAE,IAAI,EAAE,eAAe,EAAE,OAAO,EAAE,KAAK,EAAE,MAAM,EAAE,GAAG,IAAA,sBAAO,GAAE,CAAC;IAEpE,OAAO,CACL,4CACE,+CAAiB,aAAa,YAC3B,eAAe,CAAC,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,mBAAmB,GACpD,EACN,+CAAiB,WAAW,YACzB,IAAI,CAAC,CAAC,CAAC,SAAS,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,SAAS,GACpC,EACN,+CAAiB,cAAc,YAC5B,OAAO,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,WAAW,GAC5B,EACN,mCAAQ,OAAO,EAAE,GAAG,EAAE,CAAC,KAAK,CAAC,kBAAkB,CAAC,sBAEvC,EACT,mCAAQ,OAAO,EAAE,MAAM,uBAAiB,IACpC,CACP,CAAC;AACJ,CAAC;AAED,QAAQ,CAAC,cAAc,EAAE,GAAG,EAAE;IAC5B,MAAM,cAAc,GAAG,GAAG,EAAE;QAC1B,OAAO,IAAA,cAAM,EACX,uBAAC,gCAAa,cACZ,uBAAC,2BAAY,cACX,uBAAC,aAAa,KAAG,GACJ,GACD,CACjB,CAAC;IACJ,CAAC,CAAC;IAEF,EAAE,CAAC,8CAA8C,EAAE,GAAG,EAAE;QACtD,cAAc,EAAE,CAAC;QAEjB,MAAM,CAAC,cAAM,CAAC,WAAW,CAAC,aAAa,CAAC,CAAC,CAAC,iBAAiB,CAAC,mBAAmB,CAAC,CAAC;QACjF,MAAM,CAAC,cAAM,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC,CAAC,iBAAiB,CAAC,SAAS,CAAC,CAAC;QACrE,MAAM,CAAC,cAAM,CAAC,WAAW,CAAC,cAAc,CAAC,CAAC,CAAC,iBAAiB,CAAC,WAAW,CAAC,CAAC;IAC5E,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,qBAAqB,EAAE,KAAK,IAAI,EAAE;QACnC,cAAc,EAAE,CAAC;QAEjB,MAAM,WAAW,GAAG,cAAM,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;QAE9C,MAAM,IAAA,WAAG,EAAC,KAAK,IAAI,EAAE;YACnB,WAAW,CAAC,KAAK,EAAE,CAAC;QACtB,CAAC,CAAC,CAAC;QAEH,+CAA+C;QAC/C,MAAM,IAAA,eAAO,EAAC,GAAG,EAAE;YACjB,MAAM,CAAC,cAAM,CAAC,WAAW,CAAC,aAAa,CAAC,CAAC,CAAC,iBAAiB,EAAE,CAAC;QAChE,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,sBAAsB,EAAE,KAAK,IAAI,EAAE;QACpC,cAAc,EAAE,CAAC;QAEjB,MAAM,YAAY,GAAG,cAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;QAEhD,MAAM,IAAA,WAAG,EAAC,KAAK,IAAI,EAAE;YACnB,YAAY,CAAC,KAAK,EAAE,CAAC;QACvB,CAAC,CAAC,CAAC;QAEH,+CAA+C;QAC/C,MAAM,IAAA,eAAO,EAAC,GAAG,EAAE;YACjB,MAAM,CAAC,cAAM,CAAC,WAAW,CAAC,aAAa,CAAC,CAAC,CAAC,iBAAiB,CAAC,mBAAmB,CAAC,CAAC;QACnF,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["/Users/vedprakashmishra/sutra/src/components/auth/__tests__/AuthProvider.test.tsx"],"sourcesContent":["import { render, screen, fireEvent, waitFor } from \"@testing-library/react\";\nimport { AuthProvider, useAuth } from \"../AuthProvider\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport { act } from \"react\";\n\n// Test component that uses the auth context\nfunction TestComponent() {\n  const { user, isAuthenticated, isAdmin, login, logout } = useAuth();\n  \n  return (\n    <div>\n      <div data-testid=\"auth-status\">\n        {isAuthenticated ? \"authenticated\" : \"not-authenticated\"}\n      </div>\n      <div data-testid=\"user-info\">\n        {user ? `User: ${user.name}` : \"No user\"}\n      </div>\n      <div data-testid=\"admin-status\">\n        {isAdmin ? \"admin\" : \"not-admin\"}\n      </div>\n      <button onClick={() => login(\"test@example.com\")}>\n        Login\n      </button>\n      <button onClick={logout}>Logout</button>\n    </div>\n  );\n}\n\ndescribe(\"AuthProvider\", () => {\n  const renderWithAuth = () => {\n    return render(\n      <BrowserRouter>\n        <AuthProvider>\n          <TestComponent />\n        </AuthProvider>\n      </BrowserRouter>\n    );\n  };\n\n  it(\"should provide initial unauthenticated state\", () => {\n    renderWithAuth();\n    \n    expect(screen.getByTestId(\"auth-status\")).toHaveTextContent(\"not-authenticated\");\n    expect(screen.getByTestId(\"user-info\")).toHaveTextContent(\"No user\");\n    expect(screen.getByTestId(\"admin-status\")).toHaveTextContent(\"not-admin\");\n  });\n\n  it(\"should handle login\", async () => {\n    renderWithAuth();\n    \n    const loginButton = screen.getByText(\"Login\");\n    \n    await act(async () => {\n      loginButton.click();\n    });\n\n    // Wait for any async state updates to complete\n    await waitFor(() => {\n      expect(screen.getByTestId(\"auth-status\")).toBeInTheDocument();\n    });\n  });\n\n  it(\"should handle logout\", async () => {\n    renderWithAuth();\n    \n    const logoutButton = screen.getByText(\"Logout\");\n    \n    await act(async () => {\n      logoutButton.click();\n    });\n\n    // Wait for logout to complete and verify state\n    await waitFor(() => {\n      expect(screen.getByTestId(\"auth-status\")).toHaveTextContent(\"not-authenticated\");\n    });\n  });\n});\n"],"version":3}