# Pre-commit configuration for Sutra
# Run: pip install pre-commit && pre-commit install
# Updated to be comprehensive and effective while maintaining development velocity

repos:
  # Standard hooks - Essential file quality checks
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v5.0.0 # Updated to latest stable version
    hooks:
      - id: trailing-whitespace
      - id: check-yaml
        args: [--allow-multiple-documents]
      - id: check-json
        exclude: tsconfig.*\.json$
      - id: check-merge-conflict
      - id: check-case-conflict
      - id: check-added-large-files
        args: [--maxkb=1000]
      - id: detect-private-key
      - id: check-symlinks
        exclude: '\.venv|venv|__pycache__|\.git|node_modules'
      - id: check-executables-have-shebangs
      - id: check-shebang-scripts-are-executable

  # Frontend linting and formatting - Re-enabled with proper error handling
  - repo: local
    hooks:
      - id: npm-install-check
        name: Check NPM Dependencies
        entry: bash -c 'if [ ! -d "node_modules" ]; then echo "Installing npm dependencies..."; npm ci --prefer-offline --no-audit; fi'
        language: system
        pass_filenames: false
        always_run: true

      - id: eslint
        name: ESLint (Frontend Code Quality)
        entry: bash -c 'if command -v npx &> /dev/null && [ -f "package.json" ]; then npx eslint . --ext ts,tsx --report-unused-disable-directives --max-warnings 0 --fix; else echo "ESLint not available - skipping"; fi'
        language: system
        files: \.(ts|tsx|js|jsx)$
        exclude: (node_modules/|\.venv/|dist/|coverage/|api/)

      - id: prettier
        name: Prettier (Code Formatting)
        entry: bash -c 'if command -v npx &> /dev/null && [ -f "package.json" ]; then npx prettier --write .; else echo "Prettier not available - skipping"; fi'
        language: system
        files: \.(ts|tsx|js|jsx|json|md|yml|yaml)$
        exclude: (node_modules/|\.venv/|dist/|coverage/|package-lock\.json|api/)

      - id: typescript-check
        name: TypeScript Type Check
        entry: bash -c 'if command -v npx &> /dev/null && [ -f "tsconfig.json" ]; then npx tsc --noEmit; else echo "TypeScript not available - skipping"; fi'
        language: system
        files: \.(ts|tsx)$
        pass_filenames: false
        exclude: (node_modules/|\.venv/|dist/|coverage/|api/)

  # Python hooks - Enhanced with better error handling
  - repo: https://github.com/psf/black
    rev: 25.1.0 # Updated to latest stable version
    hooks:
      - id: black
        language_version: python3
        files: api/.*\.py$
        args: [--line-length=127]

  # Python linting - Re-enabled with reasonable rules
  - repo: https://github.com/pycqa/flake8
    rev: 7.3.0 # Updated to latest stable version
    hooks:
      - id: flake8
        args:
          [
            "--max-line-length=127",
            "--extend-ignore=E203,W503,E402,F841,E501,E231,E712,F401,F811,E722,F541,E713,E221",
            "--per-file-ignores=__init__.py:F401",
          ]
        files: api/.*\.py$

  # Python import sorting
  - repo: https://github.com/pycqa/isort
    rev: 6.0.1
    hooks:
      - id: isort
        args: [--profile=black, --line-length=127]
        files: api/.*\.py$

  # Security scanning - Re-enabled with proper baseline
  - repo: https://github.com/Yelp/detect-secrets
    rev: v1.5.0 # Updated to latest stable version
    hooks:
      - id: detect-secrets
        args:
          [
            "--baseline",
            ".secrets.baseline",
            "--exclude-files",
            'package-lock\.json$|\.jest-cache/|\.venv/|\.venv-test/|node_modules/|__pycache__/|\.git/',
            "--exclude-lines",
            "integrity.*sha",
          ]

  # Infrastructure validation - Re-enabled with proper checks
  - repo: local
    hooks:
      - id: bicep-validation
        name: Bicep Template Validation
        entry: bash -c 'if command -v az &> /dev/null; then cd infrastructure && az bicep install >/dev/null 2>&1 && az bicep build --file persistent.bicep --outfile persistent.json >/dev/null 2>&1 && az bicep build --file compute.bicep --outfile compute.json >/dev/null 2>&1 && echo "✅ Bicep templates validated and JSON updated"; else echo "⚠️  Azure CLI not available - skipping Bicep validation"; fi'
        language: system
        files: infrastructure/.*\.bicep$
        pass_filenames: false

      - id: shell-script-validation
        name: Shell Script Syntax Check
        entry: bash -c 'for file in "$@"; do bash -n "$file"; done'
        language: system
        files: \.sh$
        pass_filenames: true

      - id: python-requirements-check
        name: Python Requirements Validation
        entry: bash -c 'cd api && python3 -m pip check 2>/dev/null || echo "Python dependencies check failed - may need pip install"'
        language: system
        files: api/requirements.*\.txt$
        pass_filenames: false

  # End-of-file fixer runs last to avoid conflicts with Bicep JSON generation
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v5.0.0
    hooks:
      - id: end-of-file-fixer
        exclude: infrastructure/(compute|persistent)\.json$

# Fast hooks run first, slower ones later
default_stages: [pre-commit]
fail_fast: false
